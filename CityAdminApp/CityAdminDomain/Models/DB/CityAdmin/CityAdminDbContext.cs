// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CityAdminDomain.Models.DB.CityAdmin
{
    public partial class CityAdminDbContext : DbContext
    {
        public CityAdminDbContext()
        {
        }

        public CityAdminDbContext(DbContextOptions<CityAdminDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ACL> ACL { get; set; }
        public virtual DbSet<Identities> Identities { get; set; }
        public virtual DbSet<Session> Session { get; set; }
        public virtual DbSet<SessionHistory> SessionHistory { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ACL>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action).IsUnicode(false);

                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.subject).IsUnicode(false);

                entity.Property(e => e.updateDTM).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.users_)
                    .WithMany()
                    .HasForeignKey(d => d.users_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ACL_Users_id");
            });

            modelBuilder.Entity<Identities>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.data).HasComment("For store JSON data");

                entity.Property(e => e.is_enable).HasDefaultValueSql("((1))");

                entity.Property(e => e.method)
                    .IsUnicode(false)
                    .HasComment("PASSWORD, TOTP, GOOGLE, FB");

                entity.Property(e => e.updateDTM).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.users_)
                    .WithMany()
                    .HasForeignKey(d => d.users_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Identities_Users_id");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.loginIP).IsUnicode(false);

                entity.Property(e => e.token)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.users_)
                    .WithMany()
                    .HasForeignKey(d => d.users_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_session_Users");
            });

            modelBuilder.Entity<SessionHistory>(entity =>
            {
                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.loginIP).IsUnicode(false);

                entity.Property(e => e.memo).HasComment("JSON format with c# queue");

                entity.Property(e => e.token)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasIndex(e => new { e.company_id, e.user_name })
                    .IsUnique();

                entity.Property(e => e.company_id).IsUnicode(false);

                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.role).IsUnicode(false);

                entity.Property(e => e.role_detail).IsUnicode(false);

                entity.Property(e => e.status).HasComment("帳號狀態。0：關閉；1：暫停；10：啟用(正常)");

                entity.Property(e => e.store_id).IsUnicode(false);

                entity.Property(e => e.terminal_id).IsUnicode(false);

                entity.Property(e => e.updateDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_name).IsUnicode(false);
                entity.Property(e => e.macAddress).IsUnicode(false);

            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}