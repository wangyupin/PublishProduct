// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace POVWebDomain.Models.DB.POVWeb
{
    public partial class POVWebDbContext : DbContext
    {
        public POVWebDbContext()
        {
        }

        public POVWebDbContext(DbContextOptions<POVWebDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AGQ_Detail> AGQ_Detail { get; set; }
        public virtual DbSet<AGQ_GoodDetail> AGQ_GoodDetail { get; set; }
        public virtual DbSet<AGQ_Goods> AGQ_Goods { get; set; }
        public virtual DbSet<AGQ_Project> AGQ_Project { get; set; }
        public virtual DbSet<APjt> APjt { get; set; }
        public virtual DbSet<APjtDetail> APjtDetail { get; set; }
        public virtual DbSet<APjtT1Send> APjtT1Send { get; set; }
        public virtual DbSet<APjtT3Set> APjtT3Set { get; set; }
        public virtual DbSet<APjtT4Jia> APjtT4Jia { get; set; }
        public virtual DbSet<APjtT5NotIncludeItem> APjtT5NotIncludeItem { get; set; }
        public virtual DbSet<APjtT5Send> APjtT5Send { get; set; }
        public virtual DbSet<AdidasTab1> AdidasTab1 { get; set; }
        public virtual DbSet<Advertisement> Advertisement { get; set; }
        public virtual DbSet<AgeSegment> AgeSegment { get; set; }
        public virtual DbSet<Agreement> Agreement { get; set; }
        public virtual DbSet<AlikeBrand> AlikeBrand { get; set; }
        public virtual DbSet<AlikeSetDate> AlikeSetDate { get; set; }
        public virtual DbSet<AlipayAccount> AlipayAccount { get; set; }
        public virtual DbSet<ApiAtmOrder> ApiAtmOrder { get; set; }
        public virtual DbSet<ApiDRCnew> ApiDRCnew { get; set; }
        public virtual DbSet<ApiDeliveryReceipt> ApiDeliveryReceipt { get; set; }
        public virtual DbSet<ApiDeliveryReceiptContrast> ApiDeliveryReceiptContrast { get; set; }
        public virtual DbSet<ApiMember> ApiMember { get; set; }
        public virtual DbSet<ApiOrder> ApiOrder { get; set; }
        public virtual DbSet<ApiOrderDetail> ApiOrderDetail { get; set; }
        public virtual DbSet<ApiPlatform> ApiPlatform { get; set; }
        public virtual DbSet<ApiProductSpec> ApiProductSpec { get; set; }
        public virtual DbSet<ApiProductSpecA> ApiProductSpecA { get; set; }
        public virtual DbSet<ApiProductSpecList> ApiProductSpecList { get; set; }
        public virtual DbSet<ApiProductSpecList2> ApiProductSpecList2 { get; set; }
        public virtual DbSet<ApiProductSpecListDoMove> ApiProductSpecListDoMove { get; set; }
        public virtual DbSet<ApiReturns> ApiReturns { get; set; }
        public virtual DbSet<ApiSHOPLINEeinv> ApiSHOPLINEeinv { get; set; }
        public virtual DbSet<ApiSetting> ApiSetting { get; set; }
        public virtual DbSet<ApiShippingSupplier> ApiShippingSupplier { get; set; }
        public virtual DbSet<ApiSupplier> ApiSupplier { get; set; }
        public virtual DbSet<ApiTransaction> ApiTransaction { get; set; }
        public virtual DbSet<Api_FF_Returns> Api_FF_Returns { get; set; }
        public virtual DbSet<Archives> Archives { get; set; }
        public virtual DbSet<ArchivesConfigList> ArchivesConfigList { get; set; }
        public virtual DbSet<ArchivesDelete> ArchivesDelete { get; set; }
        public virtual DbSet<ArchivesObjectList> ArchivesObjectList { get; set; }
        public virtual DbSet<ArchivesObjectListDelete> ArchivesObjectListDelete { get; set; }
        public virtual DbSet<AreaCode> AreaCode { get; set; }
        public virtual DbSet<AutoTransferSet> AutoTransferSet { get; set; }
        public virtual DbSet<BPUPList> BPUPList { get; set; }
        public virtual DbSet<BPUPListDetail> BPUPListDetail { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<BankBusiness> BankBusiness { get; set; }
        public virtual DbSet<BarTemp> BarTemp { get; set; }
        public virtual DbSet<BranchDiscount> BranchDiscount { get; set; }
        public virtual DbSet<BranchMoney> BranchMoney { get; set; }
        public virtual DbSet<BranchPay> BranchPay { get; set; }
        public virtual DbSet<Branch_Gather> Branch_Gather { get; set; }
        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<BrandCust> BrandCust { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<ChangePrice> ChangePrice { get; set; }
        public virtual DbSet<ChangePriceHaveTran> ChangePriceHaveTran { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientChangePrice> ClientChangePrice { get; set; }
        public virtual DbSet<ClientChangePriceHaveTran> ClientChangePriceHaveTran { get; set; }
        public virtual DbSet<ClientDealMode> ClientDealMode { get; set; }
        public virtual DbSet<ClientGoods> ClientGoods { get; set; }
        public virtual DbSet<CloseAccount> CloseAccount { get; set; }
        public virtual DbSet<ClosingSetup> ClosingSetup { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<CostAdjust> CostAdjust { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Cust> Cust { get; set; }
        public virtual DbSet<DeleteMemberOrder> DeleteMemberOrder { get; set; }
        public virtual DbSet<DeviceInfo> DeviceInfo { get; set; }
        public virtual DbSet<DistributeGoods> DistributeGoods { get; set; }
        public virtual DbSet<DistributePoint> DistributePoint { get; set; }
        public virtual DbSet<EInvAllowanceDet> EInvAllowanceDet { get; set; }
        public virtual DbSet<EInvAllowanceMain> EInvAllowanceMain { get; set; }
        public virtual DbSet<EInvCancelAllowance> EInvCancelAllowance { get; set; }
        public virtual DbSet<EInvCancelNo> EInvCancelNo { get; set; }
        public virtual DbSet<EInvGetNo> EInvGetNo { get; set; }
        public virtual DbSet<EInvRecallNo> EInvRecallNo { get; set; }
        public virtual DbSet<EInvSerial> EInvSerial { get; set; }
        public virtual DbSet<EInvSet> EInvSet { get; set; }
        public virtual DbSet<EInvShipNoDet> EInvShipNoDet { get; set; }
        public virtual DbSet<EInvShipNoMain> EInvShipNoMain { get; set; }
        public virtual DbSet<EmpCheckDetail> EmpCheckDetail { get; set; }
        public virtual DbSet<EmpClockIn> EmpClockIn { get; set; }
        public virtual DbSet<EmpClockInMonth> EmpClockInMonth { get; set; }
        public virtual DbSet<EmpDutyTypeSetUp> EmpDutyTypeSetUp { get; set; }
        public virtual DbSet<EmpOnDuty> EmpOnDuty { get; set; }
        public virtual DbSet<EmpTXClock> EmpTXClock { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeeCheck> EmployeeCheck { get; set; }
        public virtual DbSet<ExcelGoods> ExcelGoods { get; set; }
        public virtual DbSet<ExcelSpecial> ExcelSpecial { get; set; }
        public virtual DbSet<FactRequire> FactRequire { get; set; }
        public virtual DbSet<Factory> Factory { get; set; }
        public virtual DbSet<FactoryClass> FactoryClass { get; set; }
        public virtual DbSet<FactoryRequire> FactoryRequire { get; set; }
        public virtual DbSet<FactorySort> FactorySort { get; set; }
        public virtual DbSet<Finmcr> Finmcr { get; set; }
        public virtual DbSet<Fonus> Fonus { get; set; }
        public virtual DbSet<GBSMS> GBSMS { get; set; }
        public virtual DbSet<GBSMSMaintain> GBSMSMaintain { get; set; }
        public virtual DbSet<GBSmsAccount> GBSmsAccount { get; set; }
        public virtual DbSet<GMobileProgram> GMobileProgram { get; set; }
        public virtual DbSet<GMobileUserProgram> GMobileUserProgram { get; set; }
        public virtual DbSet<GMobileUsers> GMobileUsers { get; set; }
        public virtual DbSet<Gather> Gather { get; set; }
        public virtual DbSet<GatherDetail> GatherDetail { get; set; }
        public virtual DbSet<Gift> Gift { get; set; }
        public virtual DbSet<GoodCheck> GoodCheck { get; set; }
        public virtual DbSet<GoodCompare> GoodCompare { get; set; }
        public virtual DbSet<GoodPrize> GoodPrize { get; set; }
        public virtual DbSet<GoodSamplePicture> GoodSamplePicture { get; set; }
        public virtual DbSet<GoodShelf> GoodShelf { get; set; }
        public virtual DbSet<GoodSpecial> GoodSpecial { get; set; }
        public virtual DbSet<GoodStorage> GoodStorage { get; set; }
        public virtual DbSet<GoodStorage_Update> GoodStorage_Update { get; set; }
        public virtual DbSet<Goods> Goods { get; set; }
        public virtual DbSet<GoodsBar> GoodsBar { get; set; }
        public virtual DbSet<GoodsMonth> GoodsMonth { get; set; }
        public virtual DbSet<GoodsSample> GoodsSample { get; set; }
        public virtual DbSet<GroupProgram> GroupProgram { get; set; }
        public virtual DbSet<HCTTitle> HCTTitle { get; set; }
        public virtual DbSet<Infonation> Infonation { get; set; }
        public virtual DbSet<InvoiceSet> InvoiceSet { get; set; }
        public virtual DbSet<KTJTitle> KTJTitle { get; set; }
        public virtual DbSet<LastBPUPList> LastBPUPList { get; set; }
        public virtual DbSet<LogOutEInvALLCancelNo> LogOutEInvALLCancelNo { get; set; }
        public virtual DbSet<LogOutEInvCancelNo> LogOutEInvCancelNo { get; set; }
        public virtual DbSet<MCommInStore> MCommInStore { get; set; }
        public virtual DbSet<MCommProduce> MCommProduce { get; set; }
        public virtual DbSet<MCommTakeM> MCommTakeM { get; set; }
        public virtual DbSet<MEmpInStore> MEmpInStore { get; set; }
        public virtual DbSet<MEmpProduce> MEmpProduce { get; set; }
        public virtual DbSet<MEmpTakeM> MEmpTakeM { get; set; }
        public virtual DbSet<MGather> MGather { get; set; }
        public virtual DbSet<MGatherDetail> MGatherDetail { get; set; }
        public virtual DbSet<MMaterial> MMaterial { get; set; }
        public virtual DbSet<MMaterialMonth> MMaterialMonth { get; set; }
        public virtual DbSet<MMaterialStore> MMaterialStore { get; set; }
        public virtual DbSet<MMaterialStruct> MMaterialStruct { get; set; }
        public virtual DbSet<MModify> MModify { get; set; }
        public virtual DbSet<MOrders> MOrders { get; set; }
        public virtual DbSet<MPay> MPay { get; set; }
        public virtual DbSet<MPayDetail> MPayDetail { get; set; }
        public virtual DbSet<MPreProduct> MPreProduct { get; set; }
        public virtual DbSet<MProcess> MProcess { get; set; }
        public virtual DbSet<MPurchase> MPurchase { get; set; }
        public virtual DbSet<MShip> MShip { get; set; }
        public virtual DbSet<MShipDetail> MShipDetail { get; set; }
        public virtual DbSet<MStgCheck> MStgCheck { get; set; }
        public virtual DbSet<MStock> MStock { get; set; }
        public virtual DbSet<MStockDetail> MStockDetail { get; set; }
        public virtual DbSet<MStyleStruct> MStyleStruct { get; set; }
        public virtual DbSet<MaterialSamplePicture> MaterialSamplePicture { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<MemberCard> MemberCard { get; set; }
        public virtual DbSet<MemberGetPoint> MemberGetPoint { get; set; }
        public virtual DbSet<MemberLv> MemberLv { get; set; }
        public virtual DbSet<MemberOrder> MemberOrder { get; set; }
        public virtual DbSet<MemberWork> MemberWork { get; set; }
        public virtual DbSet<Member_DEL> Member_DEL { get; set; }
        public virtual DbSet<MidPov232Tmp> MidPov232Tmp { get; set; }
        public virtual DbSet<MidShipTableATmp> MidShipTableATmp { get; set; }
        public virtual DbSet<MidShipTableBTmp> MidShipTableBTmp { get; set; }
        public virtual DbSet<Mms208Tmp> Mms208Tmp { get; set; }
        public virtual DbSet<Mms211DetailTmp> Mms211DetailTmp { get; set; }
        public virtual DbSet<Mms211Tmp> Mms211Tmp { get; set; }
        public virtual DbSet<Mms212DetailTmp> Mms212DetailTmp { get; set; }
        public virtual DbSet<Mms212Tmp> Mms212Tmp { get; set; }
        public virtual DbSet<Mms213ATmp> Mms213ATmp { get; set; }
        public virtual DbSet<Mms213DetailTmp> Mms213DetailTmp { get; set; }
        public virtual DbSet<Mms213Tmp> Mms213Tmp { get; set; }
        public virtual DbSet<Mms214ATmp> Mms214ATmp { get; set; }
        public virtual DbSet<Mms214DetailTmp> Mms214DetailTmp { get; set; }
        public virtual DbSet<Mms214Tmp> Mms214Tmp { get; set; }
        public virtual DbSet<Mms215Temp> Mms215Temp { get; set; }
        public virtual DbSet<Mms301Temp> Mms301Temp { get; set; }
        public virtual DbSet<Mms302Temp> Mms302Temp { get; set; }
        public virtual DbSet<Mms408temp> Mms408temp { get; set; }
        public virtual DbSet<Mms5081Tmp> Mms5081Tmp { get; set; }
        public virtual DbSet<Mms5082Detailtmp> Mms5082Detailtmp { get; set; }
        public virtual DbSet<Mms5082Totaltmp> Mms5082Totaltmp { get; set; }
        public virtual DbSet<Mms509Tmp> Mms509Tmp { get; set; }
        public virtual DbSet<Mms609Temp> Mms609Temp { get; set; }
        public virtual DbSet<Mms610Temp> Mms610Temp { get; set; }
        public virtual DbSet<Mms611Temp> Mms611Temp { get; set; }
        public virtual DbSet<Mms6121ATemp> Mms6121ATemp { get; set; }
        public virtual DbSet<Mms6121BTemp> Mms6121BTemp { get; set; }
        public virtual DbSet<Mms6122Temp> Mms6122Temp { get; set; }
        public virtual DbSet<Modify> Modify { get; set; }
        public virtual DbSet<NikeTab1> NikeTab1 { get; set; }
        public virtual DbSet<NikeTab2> NikeTab2 { get; set; }
        public virtual DbSet<NikeTab3> NikeTab3 { get; set; }
        public virtual DbSet<OldGoodSpecial> OldGoodSpecial { get; set; }
        public virtual DbSet<OldGoodSpecialA> OldGoodSpecialA { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OtherProc> OtherProc { get; set; }
        public virtual DbSet<OtherProcDelete> OtherProcDelete { get; set; }
        public virtual DbSet<OutWork> OutWork { get; set; }
        public virtual DbSet<POV402Tmp> POV402Tmp { get; set; }
        public virtual DbSet<POVInOutTemp> POVInOutTemp { get; set; }
        public virtual DbSet<POVInTranTemp> POVInTranTemp { get; set; }
        public virtual DbSet<POVShip> POVShip { get; set; }
        public virtual DbSet<POVShipDetail> POVShipDetail { get; set; }
        public virtual DbSet<PaperSetup> PaperSetup { get; set; }
        public virtual DbSet<Pay> Pay { get; set; }
        public virtual DbSet<PayDetail> PayDetail { get; set; }
        public virtual DbSet<Phrase> Phrase { get; set; }
        public virtual DbSet<Picture> Picture { get; set; }
        public virtual DbSet<Pov108BTemp> Pov108BTemp { get; set; }
        public virtual DbSet<Pov108Temp> Pov108Temp { get; set; }
        public virtual DbSet<Pov121SellTemp> Pov121SellTemp { get; set; }
        public virtual DbSet<Pov125Tmp> Pov125Tmp { get; set; }
        public virtual DbSet<Pov133Temp> Pov133Temp { get; set; }
        public virtual DbSet<Pov203Tmp> Pov203Tmp { get; set; }
        public virtual DbSet<Pov207Temp> Pov207Temp { get; set; }
        public virtual DbSet<Pov208Tmp> Pov208Tmp { get; set; }
        public virtual DbSet<Pov210DetailTmp> Pov210DetailTmp { get; set; }
        public virtual DbSet<Pov210Tmp> Pov210Tmp { get; set; }
        public virtual DbSet<Pov211DetailTmp> Pov211DetailTmp { get; set; }
        public virtual DbSet<Pov211Tmp> Pov211Tmp { get; set; }
        public virtual DbSet<Pov212ATmp> Pov212ATmp { get; set; }
        public virtual DbSet<Pov212DetailTmp> Pov212DetailTmp { get; set; }
        public virtual DbSet<Pov212Tmp> Pov212Tmp { get; set; }
        public virtual DbSet<Pov213ATmp> Pov213ATmp { get; set; }
        public virtual DbSet<Pov213DetailTmp> Pov213DetailTmp { get; set; }
        public virtual DbSet<Pov213Tmp> Pov213Tmp { get; set; }
        public virtual DbSet<Pov217Tmp> Pov217Tmp { get; set; }
        public virtual DbSet<Pov219temp> Pov219temp { get; set; }
        public virtual DbSet<Pov224Tmp> Pov224Tmp { get; set; }
        public virtual DbSet<Pov225Tmp> Pov225Tmp { get; set; }
        public virtual DbSet<Pov227Temp> Pov227Temp { get; set; }
        public virtual DbSet<Pov232Tmp> Pov232Tmp { get; set; }
        public virtual DbSet<Pov242Temp> Pov242Temp { get; set; }
        public virtual DbSet<Pov271Temp> Pov271Temp { get; set; }
        public virtual DbSet<Pov272Tmp> Pov272Tmp { get; set; }
        public virtual DbSet<Pov408tmp> Pov408tmp { get; set; }
        public virtual DbSet<Pov409Detailtmp> Pov409Detailtmp { get; set; }
        public virtual DbSet<Pov409Totaltmp> Pov409Totaltmp { get; set; }
        public virtual DbSet<Pov412temp> Pov412temp { get; set; }
        public virtual DbSet<Pov413Tmp> Pov413Tmp { get; set; }
        public virtual DbSet<Pov414Tmp> Pov414Tmp { get; set; }
        public virtual DbSet<Pov415Tmp> Pov415Tmp { get; set; }
        public virtual DbSet<Pov418tmp> Pov418tmp { get; set; }
        public virtual DbSet<Pov419Tmp> Pov419Tmp { get; set; }
        public virtual DbSet<Pov501Temp> Pov501Temp { get; set; }
        public virtual DbSet<Pov502CalSort> Pov502CalSort { get; set; }
        public virtual DbSet<Pov502Temp> Pov502Temp { get; set; }
        public virtual DbSet<Pov503Temp> Pov503Temp { get; set; }
        public virtual DbSet<Pov504Temp> Pov504Temp { get; set; }
        public virtual DbSet<Pov505Temp> Pov505Temp { get; set; }
        public virtual DbSet<Pov506Temp> Pov506Temp { get; set; }
        public virtual DbSet<Pov507Temp> Pov507Temp { get; set; }
        public virtual DbSet<Pov508Tmp> Pov508Tmp { get; set; }
        public virtual DbSet<Pov510Tmp> Pov510Tmp { get; set; }
        public virtual DbSet<Pov511Tmp> Pov511Tmp { get; set; }
        public virtual DbSet<Pov512Tmp> Pov512Tmp { get; set; }
        public virtual DbSet<Pov513Temp> Pov513Temp { get; set; }
        public virtual DbSet<Pov514Temp> Pov514Temp { get; set; }
        public virtual DbSet<Pov516Temp> Pov516Temp { get; set; }
        public virtual DbSet<Pov517Temp> Pov517Temp { get; set; }
        public virtual DbSet<Pov518Temp> Pov518Temp { get; set; }
        public virtual DbSet<Pov519Temp> Pov519Temp { get; set; }
        public virtual DbSet<Pov5201ATemp> Pov5201ATemp { get; set; }
        public virtual DbSet<Pov5201BTemp> Pov5201BTemp { get; set; }
        public virtual DbSet<Pov5202Temp> Pov5202Temp { get; set; }
        public virtual DbSet<Pov523Temp> Pov523Temp { get; set; }
        public virtual DbSet<Pov576Tmp> Pov576Tmp { get; set; }
        public virtual DbSet<Pov581Tmp> Pov581Tmp { get; set; }
        public virtual DbSet<Pov610temp> Pov610temp { get; set; }
        public virtual DbSet<PreAchieve> PreAchieve { get; set; }
        public virtual DbSet<PreArchieveSetting> PreArchieveSetting { get; set; }
        public virtual DbSet<PrePurchase> PrePurchase { get; set; }
        public virtual DbSet<PreStock> PreStock { get; set; }
        public virtual DbSet<PreStockDetail> PreStockDetail { get; set; }
        public virtual DbSet<PreStore> PreStore { get; set; }
        public virtual DbSet<PreTransfer> PreTransfer { get; set; }
        public virtual DbSet<PriceAdjust> PriceAdjust { get; set; }
        public virtual DbSet<PriceL> PriceL { get; set; }
        public virtual DbSet<ProgramTask> ProgramTask { get; set; }
        public virtual DbSet<Purchase> Purchase { get; set; }
        public virtual DbSet<Receipts> Receipts { get; set; }
        public virtual DbSet<Require> Require { get; set; }
        public virtual DbSet<RequireRecord> RequireRecord { get; set; }
        public virtual DbSet<RptSet> RptSet { get; set; }
        public virtual DbSet<SMSgo> SMSgo { get; set; }
        public virtual DbSet<SMSgoDetail> SMSgoDetail { get; set; }
        public virtual DbSet<SMSgoMemDet> SMSgoMemDet { get; set; }
        public virtual DbSet<Sell> Sell { get; set; }
        public virtual DbSet<SellChange> SellChange { get; set; }
        public virtual DbSet<SellChangeAmount> SellChangeAmount { get; set; }
        public virtual DbSet<SellClosing> SellClosing { get; set; }
        public virtual DbSet<SellDingTran> SellDingTran { get; set; }
        public virtual DbSet<SellInvoice> SellInvoice { get; set; }
        public virtual DbSet<SellNoSaveTmp> SellNoSaveTmp { get; set; }
        public virtual DbSet<SellReturns> SellReturns { get; set; }
        public virtual DbSet<SellVisitorNum> SellVisitorNum { get; set; }
        public virtual DbSet<SellYahoo> SellYahoo { get; set; }
        public virtual DbSet<Sellding> Sellding { get; set; }
        public virtual DbSet<Ship> Ship { get; set; }
        public virtual DbSet<ShipDetail> ShipDetail { get; set; }
        public virtual DbSet<ShipDetailP> ShipDetailP { get; set; }
        public virtual DbSet<ShipP> ShipP { get; set; }
        public virtual DbSet<Shop> Shop { get; set; }
        public virtual DbSet<ShopDiscount> ShopDiscount { get; set; }
        public virtual DbSet<SimpleBranchAchieve> SimpleBranchAchieve { get; set; }
        public virtual DbSet<SiteCollectionList> SiteCollectionList { get; set; }
        public virtual DbSet<Size> Size { get; set; }
        public virtual DbSet<SmartClientState> SmartClientState { get; set; }
        public virtual DbSet<Sort01> Sort01 { get; set; }
        public virtual DbSet<Sort02> Sort02 { get; set; }
        public virtual DbSet<Sort03> Sort03 { get; set; }
        public virtual DbSet<Sort04> Sort04 { get; set; }
        public virtual DbSet<Sort05> Sort05 { get; set; }
        public virtual DbSet<StgCheck> StgCheck { get; set; }
        public virtual DbSet<StgCheckDetail> StgCheckDetail { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<StockDetail> StockDetail { get; set; }
        public virtual DbSet<StockDetailP> StockDetailP { get; set; }
        public virtual DbSet<StockP> StockP { get; set; }
        public virtual DbSet<SysSize> SysSize { get; set; }
        public virtual DbSet<TBCalculate> TBCalculate { get; set; }
        public virtual DbSet<TableInfo> TableInfo { get; set; }
        public virtual DbSet<TdSalePlan> TdSalePlan { get; set; }
        public virtual DbSet<TdSalePlanD> TdSalePlanD { get; set; }
        public virtual DbSet<TradeDistributeGoods> TradeDistributeGoods { get; set; }
        public virtual DbSet<TradePreShip> TradePreShip { get; set; }
        public virtual DbSet<TransConfig> TransConfig { get; set; }
        public virtual DbSet<TransTemp> TransTemp { get; set; }
        public virtual DbSet<TransTmp> TransTmp { get; set; }
        public virtual DbSet<TransToShip> TransToShip { get; set; }
        public virtual DbSet<TransToStock> TransToStock { get; set; }
        public virtual DbSet<Transfer> Transfer { get; set; }
        public virtual DbSet<TransferBarList> TransferBarList { get; set; }
        public virtual DbSet<TransferDelete> TransferDelete { get; set; }
        public virtual DbSet<TransferP> TransferP { get; set; }
        public virtual DbSet<TsLineHelpField> TsLineHelpField { get; set; }
        public virtual DbSet<TsLineHelpMain> TsLineHelpMain { get; set; }
        public virtual DbSet<TsPara> TsPara { get; set; }
        public virtual DbSet<TsReportCondition> TsReportCondition { get; set; }
        public virtual DbSet<TsReportConditionSection> TsReportConditionSection { get; set; }
        public virtual DbSet<TsReportMain> TsReportMain { get; set; }
        public virtual DbSet<TsReportResult> TsReportResult { get; set; }
        public virtual DbSet<TsReportScheme> TsReportScheme { get; set; }
        public virtual DbSet<TsReportSchemeTmp> TsReportSchemeTmp { get; set; }
        public virtual DbSet<TsUserFunction> TsUserFunction { get; set; }
        public virtual DbSet<TsUserRight> TsUserRight { get; set; }
        public virtual DbSet<TsUsers> TsUsers { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<WayBill> WayBill { get; set; }
        public virtual DbSet<WayRemark> WayRemark { get; set; }
        public virtual DbSet<WebAddChk> WebAddChk { get; set; }
        public virtual DbSet<WebDelLog> WebDelLog { get; set; }
        public virtual DbSet<WebToolsGroupProgram> WebToolsGroupProgram { get; set; }
        public virtual DbSet<WebToolsUserGroup> WebToolsUserGroup { get; set; }
        public virtual DbSet<WebToolsUsers> WebToolsUsers { get; set; }
        public virtual DbSet<WebTools_Orders> WebTools_Orders { get; set; }
        public virtual DbSet<Web_BatchPickStore> Web_BatchPickStore { get; set; }
        public virtual DbSet<Web_Payment> Web_Payment { get; set; }
        public virtual DbSet<Web_Phrase> Web_Phrase { get; set; }
        public virtual DbSet<Web_Ship> Web_Ship { get; set; }
        public virtual DbSet<Web_WayTrans> Web_WayTrans { get; set; }
        public virtual DbSet<YahooSell> YahooSell { get; set; }
        public virtual DbSet<YahooSellReturns> YahooSellReturns { get; set; }
        public virtual DbSet<myChangePriceDetail> myChangePriceDetail { get; set; }
        public virtual DbSet<myClientChangePriceDetail> myClientChangePriceDetail { get; set; }
        public virtual DbSet<petertest> petertest { get; set; }
        public virtual DbSet<pov1075Temp> pov1075Temp { get; set; }
        public virtual DbSet<pov107Temp> pov107Temp { get; set; }
        public virtual DbSet<pov308temp> pov308temp { get; set; }
        public virtual DbSet<pov533temp> pov533temp { get; set; }
        public virtual DbSet<pov534temp> pov534temp { get; set; }
        public virtual DbSet<pov536temp> pov536temp { get; set; }
        public virtual DbSet<shopping_cart> shopping_cart { get; set; }
        public virtual DbSet<stClockOnOff> stClockOnOff { get; set; }
        public virtual DbSet<tmpHello> tmpHello { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_Taiwan_Stroke_CI_AS");

            modelBuilder.Entity<AGQ_Detail>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientShort).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.KCFlag).IsUnicode(false);

                entity.Property(e => e.NeedQty).IsUnicode(false);

                entity.Property(e => e.Num).IsUnicode(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SizePosition).IsUnicode(false);

                entity.Property(e => e.StorageQty).IsUnicode(false);

                entity.Property(e => e.StorageQtyO).IsUnicode(false);

                entity.Property(e => e.StorageQtyT).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.TakeQtyNew).IsUnicode(false);

                entity.Property(e => e.TotQty).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<AGQ_GoodDetail>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.InStore).IsUnicode(false);

                entity.Property(e => e.OutStore).IsUnicode(false);

                entity.Property(e => e.PType).IsUnicode(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SIZEName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SizePosition).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<AGQ_Goods>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.SerialName).IsUnicode(false);
            });

            modelBuilder.Entity<AGQ_Project>(entity =>
            {
                entity.Property(e => e.AutoFlag).IsUnicode(false);

                entity.Property(e => e.BaseStore).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EBaseDate).IsUnicode(false);

                entity.Property(e => e.LimitNum).IsUnicode(false);

                entity.Property(e => e.NoMoveDays).IsUnicode(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.Rank).IsUnicode(false);

                entity.Property(e => e.SBaseDate).IsUnicode(false);

                entity.Property(e => e.SameFlag).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.SellRate).IsUnicode(false);

                entity.Property(e => e.SellRate_ZC).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.StorageNum).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Week).IsUnicode(false);

                entity.Property(e => e.WeekSellRate).IsUnicode(false);
            });

            modelBuilder.Entity<APjt>(entity =>
            {
                entity.HasKey(e => e.PjtID)
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.A1PriceSort).IsUnicode(false);

                entity.Property(e => e.A4PriceSort).IsUnicode(false);

                entity.Property(e => e.AddAPjtFlag).IsUnicode(false);

                entity.Property(e => e.Alone).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EDay).IsUnicode(false);

                entity.Property(e => e.EStore).IsUnicode(false);

                entity.Property(e => e.EndCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.HongLiTimes).HasDefaultValueSql("((0))");

                entity.Property(e => e.PjtDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.PjtType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SChk).IsUnicode(false);

                entity.Property(e => e.SDay).IsUnicode(false);

                entity.Property(e => e.SStore).IsUnicode(false);

                entity.Property(e => e.StartCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T1SendFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T1SendNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.T1TypeNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.T2Dis).HasDefaultValueSql("((0))");

                entity.Property(e => e.T2Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.T3Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.T3SendFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T4Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.T4ERAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.T4ERFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T4ERGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T4Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.T4SendNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.T4chkGS)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.T5ERAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.T5ERFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5ERGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5SendNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.T5SizeFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5chkComply)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5chkGS)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T5limitOne)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.T6MeetNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.T6PriceSort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.T6SendNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<APjtDetail>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.TypeName, e.GoodID })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.TypeName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);
            });

            modelBuilder.Entity<APjtT1Send>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);
            });

            modelBuilder.Entity<APjtT3Set>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.T3SendNum).HasDefaultValueSql("('')");

                entity.Property(e => e.T3chkAmount)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<APjtT4Jia>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);
            });

            modelBuilder.Entity<APjtT5NotIncludeItem>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);
            });

            modelBuilder.Entity<APjtT5Send>(entity =>
            {
                entity.HasKey(e => new { e.PjtID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PjtID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);
            });

            modelBuilder.Entity<AdidasTab1>(entity =>
            {
                entity.Property(e => e.TB01).IsUnicode(false);

                entity.Property(e => e.TB02).IsUnicode(false);

                entity.Property(e => e.TB03).IsUnicode(false);
            });

            modelBuilder.Entity<Advertisement>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item })
                    .HasName("aaaaaAdvertisement_PK")
                    .IsClustered(false);

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Months)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AgeSegment>(entity =>
            {
                entity.Property(e => e.SegID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BeginAge).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EndAge).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SegName).IsUnicode(false);
            });

            modelBuilder.Entity<Agreement>(entity =>
            {
                entity.HasKey(e => e.SerialID)
                    .HasName("aaaaaAgreement_PK")
                    .IsClustered(false);

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ArgreeDetail)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Flag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tel)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AlikeBrand>(entity =>
            {
                entity.Property(e => e.AlikeBrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AlikeBrandName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AlikeSetDate>(entity =>
            {
                entity.Property(e => e.ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndComDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartComDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<AlipayAccount>(entity =>
            {
                entity.Property(e => e.OrderNo).IsUnicode(false);

                entity.Property(e => e.BankOrderDT).IsUnicode(false);

                entity.Property(e => e.BankOrderNo).IsUnicode(false);

                entity.Property(e => e.BuyerID).IsUnicode(false);

                entity.Property(e => e.BuyerWallet).IsUnicode(false);

                entity.Property(e => e.CurrencyName).IsUnicode(false);

                entity.Property(e => e.OrderDT).IsUnicode(false);

                entity.Property(e => e.OrderTitle).IsUnicode(false);

                entity.Property(e => e.ReBankOrderDT).IsUnicode(false);

                entity.Property(e => e.ReBankOrderNo).IsUnicode(false);

                entity.Property(e => e.ReOrderNo).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TermID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiAtmOrder>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ProductID).IsUnicode(false);

                entity.Property(e => e.SkuID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiDRCnew>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId, e.OrderID, e.DeliveryReceiptId });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.DeliveryReceiptId).IsUnicode(false);

                entity.Property(e => e.ChildShopcode).IsUnicode(false);

                entity.Property(e => e.ConvenienceStoreId).IsUnicode(false);

                entity.Property(e => e.ConvenienceStoreName).IsUnicode(false);

                entity.Property(e => e.CustomerInformation).IsUnicode(false);

                entity.Property(e => e.DistributionCenter).IsUnicode(false);

                entity.Property(e => e.FirstBarcode).IsUnicode(false);

                entity.Property(e => e.LogisticCheckSum).IsUnicode(false);

                entity.Property(e => e.LogisticCode).IsUnicode(false);

                entity.Property(e => e.LogisticOrderNumber).IsUnicode(false);

                entity.Property(e => e.MobilePhone).IsUnicode(false);

                entity.Property(e => e.MomShopcode).IsUnicode(false);

                entity.Property(e => e.OfficialName).IsUnicode(false);

                entity.Property(e => e.OrderInformation).IsUnicode(false);

                entity.Property(e => e.PickupCodBarcode).IsUnicode(false);

                entity.Property(e => e.PickupEShopBarcode).IsUnicode(false);

                entity.Property(e => e.PickupLogisticCode).IsUnicode(false);

                entity.Property(e => e.QrCode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ReturnPeriod).IsUnicode(false);

                entity.Property(e => e.ReturnType).IsUnicode(false);

                entity.Property(e => e.RoutingBarcode).IsUnicode(false);

                entity.Property(e => e.StoreEquimentId).IsUnicode(false);

                entity.Property(e => e.StoreRegion).IsUnicode(false);

                entity.Property(e => e.StoreRoute).IsUnicode(false);

                entity.Property(e => e.StoreRouteTrim).IsUnicode(false);
            });

            modelBuilder.Entity<ApiDeliveryReceipt>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.DeliveryReceiptId });

                entity.Property(e => e.DeliveryReceiptId).IsUnicode(false);

                entity.Property(e => e.Barcode).IsUnicode(false);

                entity.Property(e => e.ConvenienceStoreOrderId).IsUnicode(false);

                entity.Property(e => e.DistributionChannelStatus).IsUnicode(false);

                entity.Property(e => e.SerialNumber).IsUnicode(false);

                entity.Property(e => e.StoreType).IsUnicode(false);

                entity.Property(e => e.TakeDeliveryConvenienceStoreId).IsUnicode(false);

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<ApiDeliveryReceiptContrast>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId, e.OrderID, e.DeliveryReceiptId });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.DeliveryReceiptId).IsUnicode(false);
            });

            modelBuilder.Entity<ApiMember>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.Code });

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Buyer_EMail).IsUnicode(false);

                entity.Property(e => e.Buyer_Tel).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Receiver_EMail).IsUnicode(false);

                entity.Property(e => e.Receiver_Tel).IsUnicode(false);
            });

            modelBuilder.Entity<ApiOrder>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId, e.OrderID });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.DeliverCode).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.OrderShippingId).IsUnicode(false);

                entity.Property(e => e.OrderStatus).IsUnicode(false);

                entity.Property(e => e.PayType).IsUnicode(false);

                entity.Property(e => e.ShippingCarID).IsUnicode(false);

                entity.Property(e => e.ShippingType).IsUnicode(false);
            });

            modelBuilder.Entity<ApiOrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId, e.OrderID, e.Item });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ProductId).IsUnicode(false);

                entity.Property(e => e.ProductType).IsUnicode(false);

                entity.Property(e => e.SaleType).IsUnicode(false);

                entity.Property(e => e.SkuId).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.TaxType).IsUnicode(false);
            });

            modelBuilder.Entity<ApiPlatform>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.Access_Token).IsUnicode(false);

                entity.Property(e => e.ApiKey).IsUnicode(false);

                entity.Property(e => e.ApiSecret).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.Parameter1).IsUnicode(false);

                entity.Property(e => e.Scope).IsUnicode(false);

                entity.Property(e => e.WayMidIn711).IsUnicode(false);

                entity.Property(e => e.WayMidInFam).IsUnicode(false);
            });

            modelBuilder.Entity<ApiProductSpec>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.ProductID, e.SkuID });

                entity.Property(e => e.ProductID).IsUnicode(false);

                entity.Property(e => e.SkuID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.YSizeName).IsUnicode(false);

                entity.HasOne(d => d.Platform)
                    .WithMany(p => p.ApiProductSpec)
                    .HasForeignKey(d => d.PlatformID)
                    .HasConstraintName("FK_ApiProductSpec_ApiPlatform");
            });

            modelBuilder.Entity<ApiProductSpecA>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ProductID).IsUnicode(false);

                entity.Property(e => e.SkuID).IsUnicode(false);

                entity.Property(e => e.YSizeName).IsUnicode(false);
            });

            modelBuilder.Entity<ApiProductSpecList>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ProductID).IsUnicode(false);

                entity.Property(e => e.SkuID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiProductSpecList2>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ProductID).IsUnicode(false);

                entity.Property(e => e.SkuID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiProductSpecListDoMove>(entity =>
            {
                entity.Property(e => e.DODate).IsUnicode(false);
            });

            modelBuilder.Entity<ApiReturns>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.ReturnNo, e.TransactionId, e.OrderID });

                entity.Property(e => e.ReturnNo).IsUnicode(false);

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.GoodId).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.ProductId).IsUnicode(false);

                entity.Property(e => e.ProductName).IsUnicode(false);

                entity.Property(e => e.ReturnReason).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SkuId).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.Spec).IsUnicode(false);

                entity.Property(e => e.Zipcode).IsUnicode(false);
            });

            modelBuilder.Entity<ApiSHOPLINEeinv>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.buyer_name).IsUnicode(false);

                entity.Property(e => e.carrier_number).IsUnicode(false);

                entity.Property(e => e.carrier_type).IsUnicode(false);

                entity.Property(e => e.invoice_cancelled_at).IsUnicode(false);

                entity.Property(e => e.invoice_date).IsUnicode(false);

                entity.Property(e => e.invoice_number).IsUnicode(false);

                entity.Property(e => e.invoice_status).IsUnicode(false);

                entity.Property(e => e.invoice_tax_type).IsUnicode(false);

                entity.Property(e => e.invoice_type).IsUnicode(false);

                entity.Property(e => e.mailing_address).IsUnicode(false);

                entity.Property(e => e.n_p_o_b_a_n).IsUnicode(false);

                entity.Property(e => e.tax_id).IsUnicode(false);
            });

            modelBuilder.Entity<ApiSetting>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.Key });

                entity.Property(e => e.Key).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            modelBuilder.Entity<ApiShippingSupplier>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.Code });

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.SupplierID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiSupplier>(entity =>
            {
                entity.Property(e => e.ID).IsUnicode(false);
            });

            modelBuilder.Entity<ApiTransaction>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.Member).IsUnicode(false);

                entity.Property(e => e.ReceiverMobile).IsUnicode(false);

                entity.Property(e => e.ReceiverPhone).IsUnicode(false);

                entity.Property(e => e.ReceiverZipcode).IsUnicode(false);
            });

            modelBuilder.Entity<Api_FF_Returns>(entity =>
            {
                entity.Property(e => e.Flag).IsUnicode(false);
            });

            modelBuilder.Entity<Archives>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Content)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExecuteDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ObjectDept)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReCheckFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReCheckPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceDept)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ArchivesConfigList>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConfigTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.extField1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.extField2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ArchivesDelete>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckFlag).IsUnicode(false);

                entity.Property(e => e.Content).IsUnicode(false);

                entity.Property(e => e.DeleteTime).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.ExecuteDate).IsUnicode(false);

                entity.Property(e => e.ObjectDept).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.ReCheckFlag).IsUnicode(false);

                entity.Property(e => e.ReCheckPerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RowID).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Sort).IsUnicode(false);

                entity.Property(e => e.SourceDept).IsUnicode(false);
            });

            modelBuilder.Entity<ArchivesObjectList>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.StoreID });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SureFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.extField1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.extField2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ArchivesObjectListDelete>(entity =>
            {
                entity.Property(e => e.RowID).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.SureFlag).IsUnicode(false);

                entity.Property(e => e.extField1).IsUnicode(false);

                entity.Property(e => e.extField2).IsUnicode(false);
            });

            modelBuilder.Entity<AreaCode>(entity =>
            {
                entity.Property(e => e.AreaCode1).IsUnicode(false);
            });

            modelBuilder.Entity<AutoTransferSet>(entity =>
            {
                entity.Property(e => e.TableName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BranchFld)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsReceive)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsSend)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsTranIn)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.IsTranOut)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.OverWriteFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BPUPList>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.OrderID2, e.BPUPListID });

                entity.Property(e => e.OrderID2).IsUnicode(false);

                entity.Property(e => e.BPUPListID).IsUnicode(false);

                entity.Property(e => e.BPUPListTime).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.CollectionID).IsUnicode(false);

                entity.Property(e => e.CollectionIDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DistributionID).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.Fname).IsUnicode(false);

                entity.Property(e => e.Ftel).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.PackageID).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.ShipCheckFlag).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SiteUrl).IsUnicode(false);

                entity.Property(e => e.TelNo).IsUnicode(false);

                entity.Property(e => e.WayGoID).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.WayStoreID).IsUnicode(false);

                entity.Property(e => e.WayStoreName).IsUnicode(false);
            });

            modelBuilder.Entity<BPUPListDetail>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.OrderID2, e.Item, e.BPUPListID });

                entity.Property(e => e.OrderID2).IsUnicode(false);

                entity.Property(e => e.BPUPListID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.CollectionIDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasKey(e => e.BankID)
                    .HasName("aaaaaBank_PK")
                    .IsClustered(false);

                entity.Property(e => e.BankID).IsUnicode(false);

                entity.Property(e => e.BalanceDate).IsUnicode(false);

                entity.Property(e => e.BankName).IsUnicode(false);

                entity.Property(e => e.BankNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.TelPhone).IsUnicode(false);

                entity.Property(e => e.UnderTakePerson).IsUnicode(false);
            });

            modelBuilder.Entity<BankBusiness>(entity =>
            {
                entity.Property(e => e.AccountMode).IsUnicode(false);

                entity.Property(e => e.Accounts).IsUnicode(false);

                entity.Property(e => e.AccountsDate).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChequeID).IsUnicode(false);

                entity.Property(e => e.GatherID).IsUnicode(false);

                entity.Property(e => e.Maturity).IsUnicode(false);

                entity.Property(e => e.TicketMode).IsUnicode(false);

                entity.Property(e => e.TransferMode).IsUnicode(false);
            });

            modelBuilder.Entity<BarTemp>(entity =>
            {
                entity.Property(e => e.DAA1).IsUnicode(false);

                entity.Property(e => e.DAA2).IsUnicode(false);

                entity.Property(e => e.DAA3).IsUnicode(false);

                entity.Property(e => e.DAA4).IsUnicode(false);
            });

            modelBuilder.Entity<BranchDiscount>(entity =>
            {
                entity.HasKey(e => e.SerialID)
                    .HasName("PK_BrandchDiscount");

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.BranchDate).IsUnicode(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<BranchMoney>(entity =>
            {
                entity.HasKey(e => new { e.BranchID, e.BranchDate })
                    .HasName("aaaaaBranchMoney_PK")
                    .IsClustered(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.BranchDate).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);
            });

            modelBuilder.Entity<BranchPay>(entity =>
            {
                entity.HasKey(e => new { e.OccMonth, e.BranchID });

                entity.Property(e => e.OccMonth)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BranchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComInvDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComInvID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InInvDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InInvID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaidDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Branch_Gather>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BranchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayBank)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Person)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellMonth)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TermDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('2')");
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.HasKey(e => e.BrandID)
                    .IsClustered(false);

                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<BrandCust>(entity =>
            {
                entity.HasKey(e => new { e.BrandID, e.CustID, e.OperationID })
                    .HasName("aaaaaBrandCust_PK")
                    .IsClustered(false);

                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.OperationID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Rem1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rem2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Card>(entity =>
            {
                entity.HasKey(e => e.CardID)
                    .HasName("aaaaaCard_PK")
                    .IsClustered(false);

                entity.Property(e => e.CardID).IsUnicode(false);

                entity.Property(e => e.CardName).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<ChangePrice>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewAdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewInprice).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num10).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num11).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num12).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num13).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num14).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num15).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num16).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num17).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num9).HasDefaultValueSql("((0))");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreAdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreInprice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StateClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ChangePriceHaveTran>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.ClientID)
                    .HasName("aaaaaClient_PK")
                    .IsClustered(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.AccountAddr01).IsUnicode(false);

                entity.Property(e => e.AccountAddr02).IsUnicode(false);

                entity.Property(e => e.AccountAddr03).IsUnicode(false);

                entity.Property(e => e.AccountAddr04).IsUnicode(false);

                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.AccountNumber).IsUnicode(false);

                entity.Property(e => e.AccountPost).IsUnicode(false);

                entity.Property(e => e.BankName).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.CatenationID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.ClassNew).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.ClientShort).IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr01).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr02).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr03).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr04).IsUnicode(false);

                entity.Property(e => e.InvoiceName).IsUnicode(false);

                entity.Property(e => e.InvoicePost).IsUnicode(false);

                entity.Property(e => e.Make).IsUnicode(false);

                entity.Property(e => e.MakeAmt).IsUnicode(false);

                entity.Property(e => e.MakeNum).IsUnicode(false);

                entity.Property(e => e.OldDate).IsUnicode(false);

                entity.Property(e => e.OldMonth).IsUnicode(false);

                entity.Property(e => e.OldYear).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.Principal).IsUnicode(false);

                entity.Property(e => e.Remark01).IsUnicode(false);

                entity.Property(e => e.Remark02).IsUnicode(false);

                entity.Property(e => e.SendAddress01).IsUnicode(false);

                entity.Property(e => e.SendAddress02).IsUnicode(false);

                entity.Property(e => e.SendAddress03).IsUnicode(false);

                entity.Property(e => e.SendAddress04).IsUnicode(false);

                entity.Property(e => e.SendPost).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.TelPhon01).IsUnicode(false);

                entity.Property(e => e.TelPhon02).IsUnicode(false);

                entity.Property(e => e.TelPhon03).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.UniteID).IsUnicode(false);
            });

            modelBuilder.Entity<ClientChangePrice>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewAdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewInprice).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num10).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num11).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num12).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num13).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num14).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num15).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num16).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num17).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num9).HasDefaultValueSql("((0))");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreAdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreInprice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StateClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ClientChangePriceHaveTran>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ClientDealMode>(entity =>
            {
                entity.Property(e => e.IsCanJiMai).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsCanMaiDuan).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsCanReturnContinue).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsCanShipContinue).HasDefaultValueSql("((1))");

                entity.Property(e => e.ShipMode).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ClientGoods>(entity =>
            {
                entity.HasKey(e => new { e.GoodID, e.ClientID, e.ClientGoodID })
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientGoodID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<CloseAccount>(entity =>
            {
                entity.HasKey(e => new { e.StoreID, e.CloseClass })
                    .HasName("aaaaaCloseAccount_PK")
                    .IsClustered(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.CloseClass).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CloseDate).IsUnicode(false);
            });

            modelBuilder.Entity<ClosingSetup>(entity =>
            {
                entity.Property(e => e.ClosingID).ValueGeneratedNever();

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClosingName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClosingType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Color>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ColorID).IsUnicode(false);

                entity.Property(e => e.ColorName).IsUnicode(false);
            });

            modelBuilder.Entity<CostAdjust>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.Sign).IsUnicode(false);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.CurrencyID)
                    .HasName("aaaaaCurrency_PK")
                    .IsClustered(false);

                entity.Property(e => e.CurrencyID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CurrencyName).IsUnicode(false);
            });

            modelBuilder.Entity<Cust>(entity =>
            {
                entity.HasKey(e => e.CustName)
                    .HasName("aaaaaCust_PK")
                    .IsClustered(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.CostDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoodIDSign).IsUnicode(false);

                entity.Property(e => e.GoodsPicturePath)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.InvoiceIDEnd)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberDeadline).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewEXEVersion).HasDefaultValueSql("((0))");

                entity.Property(e => e.NewInvoiceID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewInvoiceID3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewInvoiceID3End)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewInvoiceIDEnd)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PointDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.PointSet).HasDefaultValueSql("((0))");

                entity.Property(e => e.PublicPara).IsUnicode(false);

                entity.Property(e => e.SamplePicturePath)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpecialSort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreIDLong).HasDefaultValueSql("((4))");

                entity.Property(e => e.Telphone).IsUnicode(false);
            });

            modelBuilder.Entity<DeleteMemberOrder>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.MemberName).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.SellItem).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<DeviceInfo>(entity =>
            {
                entity.Property(e => e.DeviceID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.DatabaseName).IsUnicode(false);

                entity.Property(e => e.DeviceName).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.ServerName).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<DistributeGoods>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.BeginDate).IsUnicode(false);

                entity.Property(e => e.BeginGoodID).IsUnicode(false);

                entity.Property(e => e.BeginStore).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.EndGoodID).IsUnicode(false);

                entity.Property(e => e.EndStore).IsUnicode(false);

                entity.Property(e => e.EntryPerson).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<DistributePoint>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Point).HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellMey).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<EInvAllowanceDet>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.InvDate).IsUnicode(false);

                entity.Property(e => e.InvNum).IsUnicode(false);

                entity.Property(e => e.RowNum).IsUnicode(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.TaxType).IsUnicode(false);
            });

            modelBuilder.Entity<EInvAllowanceMain>(entity =>
            {
                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.AllowanceType).IsUnicode(false);

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CompanyBAN).IsUnicode(false);

                entity.Property(e => e.CreatePerson).IsUnicode(false);

                entity.Property(e => e.CustomerIdentifier).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.Identifier).IsUnicode(false);

                entity.Property(e => e.InvFrom).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.SendPerson).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<EInvCancelAllowance>(entity =>
            {
                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.CancelDate).IsUnicode(false);

                entity.Property(e => e.CancelTime).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CreatePerson).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SendPerson).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<EInvCancelNo>(entity =>
            {
                entity.HasKey(e => new { e.AppID, e.CancelInvTerm, e.CancelInvNum, e.SellID });

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.CancelInvTerm).IsUnicode(false);

                entity.Property(e => e.CancelInvNum).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.CancelDate).IsUnicode(false);

                entity.Property(e => e.CancelTime).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CreatePerson).IsUnicode(false);

                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.InvFrom).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.PosOrderNo).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);

                entity.Property(e => e.SendPerson).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<EInvGetNo>(entity =>
            {
                entity.HasKey(e => new { e.AppID, e.InvType, e.InvTerm, e.InvGroup })
                    .HasName("PK_EInvGetNo_1");

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.InvType).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.EinvEndNo).IsUnicode(false);

                entity.Property(e => e.EinvPrefix).IsUnicode(false);

                entity.Property(e => e.EinvStartNo).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.Used).IsUnicode(false);

                entity.Property(e => e.UsedPerson).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<EInvRecallNo>(entity =>
            {
                entity.HasKey(e => e.SerialID)
                    .HasName("PK_EInvRecallNo_1");

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CreatePerson).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.PosOrderNo).IsUnicode(false);

                entity.Property(e => e.RecallDate).IsUnicode(false);

                entity.Property(e => e.RecallInvNum).IsUnicode(false);

                entity.Property(e => e.RecallReason).IsUnicode(false);

                entity.Property(e => e.RecallTime).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SendPerson).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<EInvSerial>(entity =>
            {
                entity.Property(e => e.FuncType).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);
            });

            modelBuilder.Entity<EInvSet>(entity =>
            {
                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.Addr).IsUnicode(false);

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.BAN).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Tel).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.hxApiKey).IsUnicode(false);

                entity.Property(e => e.qrApiKey).IsUnicode(false);
            });

            modelBuilder.Entity<EInvShipNoDet>(entity =>
            {
                entity.HasKey(e => new { e.InvTerm, e.InvNum, e.RowNum })
                    .HasName("PK_EInvShipNoDet_1");

                entity.Property(e => e.InvTerm).IsUnicode(false);

                entity.Property(e => e.InvNum).IsUnicode(false);

                entity.Property(e => e.RowNum).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<EInvShipNoMain>(entity =>
            {
                entity.HasKey(e => new { e.AppID, e.InvTerm, e.InvNum })
                    .HasName("PK_EInvShipNoMain_1");

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.InvTerm).IsUnicode(false);

                entity.Property(e => e.InvNum).IsUnicode(false);

                entity.Property(e => e.CardNum)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CarrierNum).IsUnicode(false);

                entity.Property(e => e.CarrierType).IsUnicode(false);

                entity.Property(e => e.CheckMacValue).IsUnicode(false);

                entity.Property(e => e.ClearanceMark).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CreatePerson).IsUnicode(false);

                entity.Property(e => e.CustomerAddr).IsUnicode(false);

                entity.Property(e => e.CustomerEmail).IsUnicode(false);

                entity.Property(e => e.CustomerID).IsUnicode(false);

                entity.Property(e => e.CustomerIdentifier).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.CustomerTel).IsUnicode(false);

                entity.Property(e => e.Donation).IsUnicode(false);

                entity.Property(e => e.FreeTaxSaleAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FreeTaxSalesAmount).HasDefaultValueSql("('0')");

                entity.Property(e => e.InvDate).IsUnicode(false);

                entity.Property(e => e.InvFrom).IsUnicode(false);

                entity.Property(e => e.InvTime).IsUnicode(false);

                entity.Property(e => e.InvType).IsUnicode(false);

                entity.Property(e => e.JSONstr).IsUnicode(false);

                entity.Property(e => e.LoveCode).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.PosOrderNo).IsUnicode(false);

                entity.Property(e => e.PrintMark).IsUnicode(false);

                entity.Property(e => e.RandomNum).IsUnicode(false);

                entity.Property(e => e.Remark1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SendPerson).IsUnicode(false);

                entity.Property(e => e.Serial).IsUnicode(false);

                entity.Property(e => e.SysDate).IsUnicode(false);

                entity.Property(e => e.SysTime).IsUnicode(false);

                entity.Property(e => e.TaxRate).IsUnicode(false);

                entity.Property(e => e.TaxType).IsUnicode(false);

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.ZeroTaxSaleAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.ZeroTaxSalesAmount).HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<EmpCheckDetail>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsSelect)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProgramName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EmpClockIn>(entity =>
            {
                entity.HasKey(e => new { e.EmpID, e.ClockStore, e.ClockDate, e.ClockTime });

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClockStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClockDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClockTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Holiday)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EmpClockInMonth>(entity =>
            {
                entity.HasKey(e => new { e.ClockMonth, e.EmpID, e.ClockStore });

                entity.Property(e => e.ClockMonth)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClockStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AwayHours1).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours10).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours11).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours12).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours13).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours14).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours15).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours16).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours17).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours18).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours19).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours2).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours20).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours21).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours22).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours23).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours24).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours25).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours26).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours27).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours28).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours29).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours3).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours30).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours31).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours4).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours5).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours6).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours7).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours8).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHours9).HasDefaultValueSql("((0))");

                entity.Property(e => e.AwayHoursTot).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InTime9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LateHours1).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours10).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours11).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours12).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours13).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours14).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours15).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours16).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours17).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours18).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours19).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours2).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours20).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours21).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours22).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours23).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours24).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours25).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours26).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours27).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours28).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours29).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours3).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours30).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours31).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours4).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours5).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours6).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours7).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours8).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHours9).HasDefaultValueSql("((0))");

                entity.Property(e => e.LateHoursTot).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours1).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours10).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours11).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours12).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours13).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours14).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours15).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours16).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours17).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours18).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours19).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours2).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours20).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours21).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours22).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours23).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours24).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours25).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours26).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours27).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours28).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours29).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours3).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours30).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours31).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours4).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours5).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours6).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours7).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours8).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHours9).HasDefaultValueSql("((0))");

                entity.Property(e => e.MorningOutHoursTot).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty1).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty10).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty11).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty12).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty13).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty14).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty15).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty16).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty17).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty18).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty19).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty2).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty20).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty21).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty22).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty23).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty24).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty25).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty26).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty27).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty28).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty29).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty3).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty30).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty31).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty4).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty5).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty6).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty7).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty8).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDuty9).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnDutyTot).HasDefaultValueSql("((0))");

                entity.Property(e => e.OutTime1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutTime9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverHours1).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours10).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours11).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours12).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours13).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours14).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours15).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours16).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours17).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours18).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours19).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours2).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours20).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours21).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours22).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours23).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours24).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours25).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours26).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours27).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours28).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours29).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours3).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours30).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours31).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours4).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours5).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours6).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours7).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours8).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHours9).HasDefaultValueSql("((0))");

                entity.Property(e => e.OverHoursTot).HasDefaultValueSql("((0))");

                entity.Property(e => e.StOffDutyTime1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOnDutyTime9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EmpDutyTypeSetUp>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DutyID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DutyName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StOffDutyTime).IsUnicode(false);

                entity.Property(e => e.StOnDutyTime).IsUnicode(false);
            });

            modelBuilder.Entity<EmpOnDuty>(entity =>
            {
                entity.HasKey(e => new { e.YearMonth, e.Item });

                entity.Property(e => e.YearMonth)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.CheckEmpID).IsUnicode(false);

                entity.Property(e => e.Day1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day13)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day19)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day21)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day23)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day24)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day26)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day27)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day28)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day29)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day31)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Day9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DepID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DepID1).IsUnicode(false);

                entity.Property(e => e.DepID10).IsUnicode(false);

                entity.Property(e => e.DepID11).IsUnicode(false);

                entity.Property(e => e.DepID12).IsUnicode(false);

                entity.Property(e => e.DepID13).IsUnicode(false);

                entity.Property(e => e.DepID14).IsUnicode(false);

                entity.Property(e => e.DepID15).IsUnicode(false);

                entity.Property(e => e.DepID16).IsUnicode(false);

                entity.Property(e => e.DepID17).IsUnicode(false);

                entity.Property(e => e.DepID18).IsUnicode(false);

                entity.Property(e => e.DepID19).IsUnicode(false);

                entity.Property(e => e.DepID2).IsUnicode(false);

                entity.Property(e => e.DepID20).IsUnicode(false);

                entity.Property(e => e.DepID21).IsUnicode(false);

                entity.Property(e => e.DepID22).IsUnicode(false);

                entity.Property(e => e.DepID23).IsUnicode(false);

                entity.Property(e => e.DepID24).IsUnicode(false);

                entity.Property(e => e.DepID25).IsUnicode(false);

                entity.Property(e => e.DepID26).IsUnicode(false);

                entity.Property(e => e.DepID27).IsUnicode(false);

                entity.Property(e => e.DepID28).IsUnicode(false);

                entity.Property(e => e.DepID29).IsUnicode(false);

                entity.Property(e => e.DepID3).IsUnicode(false);

                entity.Property(e => e.DepID30).IsUnicode(false);

                entity.Property(e => e.DepID31).IsUnicode(false);

                entity.Property(e => e.DepID4).IsUnicode(false);

                entity.Property(e => e.DepID5).IsUnicode(false);

                entity.Property(e => e.DepID6).IsUnicode(false);

                entity.Property(e => e.DepID7).IsUnicode(false);

                entity.Property(e => e.DepID8).IsUnicode(false);

                entity.Property(e => e.DepID9).IsUnicode(false);

                entity.Property(e => e.DepName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Flag).IsUnicode(false);
            });

            modelBuilder.Entity<EmpTXClock>(entity =>
            {
                entity.Property(e => e.ChangeTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ClockDate).IsUnicode(false);

                entity.Property(e => e.ClockStore).IsUnicode(false);

                entity.Property(e => e.ClockTime).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.SortFlag).IsUnicode(false);

                entity.Property(e => e.UPDATETime).IsUnicode(false);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmpID)
                    .HasName("aaaaaEmployee_PK")
                    .IsClustered(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.BirthDay).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePeason).IsUnicode(false);

                entity.Property(e => e.ContactAddr01).IsUnicode(false);

                entity.Property(e => e.ContactAddr02).IsUnicode(false);

                entity.Property(e => e.ContactAddr03).IsUnicode(false);

                entity.Property(e => e.ContactAddr04).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.DimissionDate).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.DisposeBrand).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.ExigencePeason).IsUnicode(false);

                entity.Property(e => e.ExigenceTel).IsUnicode(false);

                entity.Property(e => e.FamilyAddr01).IsUnicode(false);

                entity.Property(e => e.FamilyAddr02).IsUnicode(false);

                entity.Property(e => e.FamilyAddr03).IsUnicode(false);

                entity.Property(e => e.FamilyAddr04).IsUnicode(false);

                entity.Property(e => e.IdCard).IsUnicode(false);

                entity.Property(e => e.Mobil).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.PicturePath).IsUnicode(false);

                entity.Property(e => e.Remark01).IsUnicode(false);

                entity.Property(e => e.Remark02).IsUnicode(false);

                entity.Property(e => e.SafetyDay).IsUnicode(false);

                entity.Property(e => e.TelPhone).IsUnicode(false);

                entity.Property(e => e.WorkDay).IsUnicode(false);

                entity.Property(e => e.WorkStation).IsUnicode(false);

                entity.Property(e => e.ZipCode01).IsUnicode(false);

                entity.Property(e => e.ZipCode02).IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeCheck>(entity =>
            {
                entity.HasKey(e => e.EmpID)
                    .HasName("aaaaaEmployeeCheck_PK")
                    .IsClustered(false);

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ExcelSpecial>(entity =>
            {
                entity.Property(e => e.Discount).IsUnicode(false);

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpecialPrice)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Start)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabelName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FactRequire>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactoryRequireID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranInStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranOutStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Factory>(entity =>
            {
                entity.HasKey(e => e.FactoryID)
                    .HasName("aaaaaFactory_PK")
                    .IsClustered(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClassID).IsUnicode(false);

                entity.Property(e => e.ComAddr01).IsUnicode(false);

                entity.Property(e => e.ComAddr02).IsUnicode(false);

                entity.Property(e => e.ComAddr03).IsUnicode(false);

                entity.Property(e => e.ComAddr04).IsUnicode(false);

                entity.Property(e => e.ContactPerson).IsUnicode(false);

                entity.Property(e => e.CountryID).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr01).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr02).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr03).IsUnicode(false);

                entity.Property(e => e.InvoiceAddr04).IsUnicode(false);

                entity.Property(e => e.Mobil).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.Principal).IsUnicode(false);

                entity.Property(e => e.Remark01).IsUnicode(false);

                entity.Property(e => e.Remark02).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);

                entity.Property(e => e.TelPhone01).IsUnicode(false);

                entity.Property(e => e.TelPhone02).IsUnicode(false);

                entity.Property(e => e.UniteID).IsUnicode(false);

                entity.Property(e => e.ZipCode01).IsUnicode(false);

                entity.Property(e => e.ZipCode02).IsUnicode(false);
            });

            modelBuilder.Entity<FactoryClass>(entity =>
            {
                entity.HasKey(e => e.ClassID)
                    .HasName("aaaaaFactoryClass_PK")
                    .IsClustered(false);

                entity.Property(e => e.ClassID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClassName).IsUnicode(false);
            });

            modelBuilder.Entity<FactoryRequire>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrandCond)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DealFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DealFlagN)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequireFactory)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranInStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranOutStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FactorySort>(entity =>
            {
                entity.HasKey(e => new { e.FactoryID, e.FactorySortID })
                    .IsClustered(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactorySortID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Code).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Size01).IsUnicode(false);

                entity.Property(e => e.Size02).IsUnicode(false);

                entity.Property(e => e.Size03).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);
            });

            modelBuilder.Entity<Finmcr>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.month).IsUnicode(false);
            });

            modelBuilder.Entity<Fonus>(entity =>
            {
                entity.HasKey(e => new { e.EmpID, e.GoodID, e.Date })
                    .HasName("aaaaaFonus_PK")
                    .IsClustered(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.Major).IsUnicode(false);
            });

            modelBuilder.Entity<GBSMS>(entity =>
            {
                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.BillCode).IsUnicode(false);

                entity.Property(e => e.Mobile).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.RES).IsUnicode(false);

                entity.Property(e => e.RESMsg).IsUnicode(false);

                entity.Property(e => e.SEQ_NO).IsUnicode(false);

                entity.Property(e => e.SmsgoID).IsUnicode(false);
            });

            modelBuilder.Entity<GBSMSMaintain>(entity =>
            {
                entity.HasKey(e => new { e.BillCode, e.SerialID });

                entity.Property(e => e.BillCode).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);
            });

            modelBuilder.Entity<GBSmsAccount>(entity =>
            {
                entity.Property(e => e.ID).IsUnicode(false);
            });

            modelBuilder.Entity<GMobileProgram>(entity =>
            {
                entity.Property(e => e.ID).HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GMobileUserProgram>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.ID });

                entity.Property(e => e.UserID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID).HasDefaultValueSql("('')");

                entity.Property(e => e.Checked)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GMobileUsers>(entity =>
            {
                entity.Property(e => e.UserID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserPW)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Gather>(entity =>
            {
                entity.HasKey(e => e.GatherID)
                    .HasName("aaaaaGather_PK")
                    .IsClustered(false);

                entity.Property(e => e.GatherID).IsUnicode(false);

                entity.Property(e => e.AccType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.ClientMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompanyName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DN05).IsUnicode(false);

                entity.Property(e => e.EndBrandID).IsUnicode(false);

                entity.Property(e => e.GatherAccount).IsUnicode(false);

                entity.Property(e => e.GatherBank).IsUnicode(false);

                entity.Property(e => e.GatherBankID).IsUnicode(false);

                entity.Property(e => e.GatherDate).IsUnicode(false);

                entity.Property(e => e.GatherPerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StartBrandID).IsUnicode(false);
            });

            modelBuilder.Entity<GatherDetail>(entity =>
            {
                entity.HasKey(e => new { e.GatherID, e.Item })
                    .HasName("aaaaaGatherDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.GatherID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.GatherMode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.TTGatherMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.TTNoGatherMoney).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Gift>(entity =>
            {
                entity.HasKey(e => e.GiftID)
                    .HasName("aaaaaGift_PK")
                    .IsClustered(false);

                entity.Property(e => e.GiftID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GiftName).IsUnicode(false);
            });

            modelBuilder.Entity<GoodCheck>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.BuyMode).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheapenPrice).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.NewChangeDate).IsUnicode(false);

                entity.Property(e => e.NewChangePerson).IsUnicode(false);

                entity.Property(e => e.NewGoodID).IsUnicode(false);

                entity.Property(e => e.OldGoodID).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.PicturePath).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.SizeNo1).IsUnicode(false);

                entity.Property(e => e.SizeNo2).IsUnicode(false);

                entity.Property(e => e.SizeNo3).IsUnicode(false);

                entity.Property(e => e.Sort01).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.Sort03).IsUnicode(false);

                entity.Property(e => e.Sort04).IsUnicode(false);

                entity.Property(e => e.Sort05).IsUnicode(false);
            });

            modelBuilder.Entity<GoodCompare>(entity =>
            {
                entity.HasKey(e => new { e.GoodID, e.OldGoodID })
                    .HasName("aaaaaGoodCompare_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OldGoodID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.NewGoodID).IsUnicode(false);

                entity.Property(e => e.NewGoodName).IsUnicode(false);

                entity.Property(e => e.OldGoodName).IsUnicode(false);
            });

            modelBuilder.Entity<GoodPrize>(entity =>
            {
                entity.HasKey(e => new { e.GoodsID, e.Branch, e.Date })
                    .HasName("aaaaaGoodPrize_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodsID).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DeleteSign).IsUnicode(false);
            });

            modelBuilder.Entity<GoodShelf>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShelfID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GoodSpecial>(entity =>
            {
                entity.HasKey(e => new { e.GoodsID, e.Branch, e.Date, e.CardID })
                    .HasName("aaaaaGoodSpecial_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodsID).IsUnicode(false);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.CardID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DeleteSign).IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GoodStorage>(entity =>
            {
                entity.HasKey(e => new { e.GoodID, e.SizeNo, e.Store })
                    .HasName("aaaaaGoodStorage_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.InDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StorageSign).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreShelfID).IsUnicode(false);

                entity.Property(e => e.TotalsellNum).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<GoodStorage_Update>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DoFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Store)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreShelfID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Goods>(entity =>
            {
                entity.HasKey(e => e.GoodID)
                    .HasName("aaaaaGoods_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ActivePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.BrandMADE).IsUnicode(false);

                entity.Property(e => e.BusinessChouCheng).HasDefaultValueSql("((0))");

                entity.Property(e => e.BuyMode).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheapenPrice).IsUnicode(false);

                entity.Property(e => e.CheckCost)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckSize1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckSize2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.Da_StyleA).IsUnicode(false);

                entity.Property(e => e.Da_StyleB).IsUnicode(false);

                entity.Property(e => e.Da_StyleC).IsUnicode(false);

                entity.Property(e => e.Da_StyleD).IsUnicode(false);

                entity.Property(e => e.Da_StyleE).IsUnicode(false);

                entity.Property(e => e.Da_StyleF).IsUnicode(false);

                entity.Property(e => e.Da_StyleG).IsUnicode(false);

                entity.Property(e => e.DelayDate).IsUnicode(false);

                entity.Property(e => e.DelayFlag).IsUnicode(false);

                entity.Property(e => e.DelayGoods).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.EmpFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryGoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.GoodsFormat).IsUnicode(false);

                entity.Property(e => e.HongLiTimes).HasDefaultValueSql("((0))");

                entity.Property(e => e.InsideMaterial).IsUnicode(false);

                entity.Property(e => e.IsSample)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.IsStruct)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Material).IsUnicode(false);

                entity.Property(e => e.Material1).IsUnicode(false);

                entity.Property(e => e.Material2).IsUnicode(false);

                entity.Property(e => e.Material3).IsUnicode(false);

                entity.Property(e => e.Material4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoWebFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.P_StyleA).IsUnicode(false);

                entity.Property(e => e.P_StyleB).IsUnicode(false);

                entity.Property(e => e.P_StyleC).IsUnicode(false);

                entity.Property(e => e.P_StyleD).IsUnicode(false);

                entity.Property(e => e.P_StyleE).IsUnicode(false);

                entity.Property(e => e.P_StyleF)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.P_StyleG).IsUnicode(false);

                entity.Property(e => e.P_StyleH).IsUnicode(false);

                entity.Property(e => e.ParentID).IsUnicode(false);

                entity.Property(e => e.PicturePath).IsUnicode(false);

                entity.Property(e => e.PicturePath1).IsUnicode(false);

                entity.Property(e => e.PicturePath2).IsUnicode(false);

                entity.Property(e => e.PicturePath3).IsUnicode(false);

                entity.Property(e => e.Production).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RemarkNew).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.SizeNo1).IsUnicode(false);

                entity.Property(e => e.SizeNo2).IsUnicode(false);

                entity.Property(e => e.SizeNo3).IsUnicode(false);

                entity.Property(e => e.Sort01).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.Sort03).IsUnicode(false);

                entity.Property(e => e.Sort04).IsUnicode(false);

                entity.Property(e => e.Sort05).IsUnicode(false);

                entity.Property(e => e.StDate).IsUnicode(false);

                entity.Property(e => e.TradePrice1).HasDefaultValueSql("((0))");

                entity.Property(e => e.TradePrice2).HasDefaultValueSql("((0))");

                entity.Property(e => e.TradePrice3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Unit).IsUnicode(false);

                entity.Property(e => e.WayNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayNo_A)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayNo_B)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayNo_C)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayNo_D)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.openfile1).IsUnicode(false);

                entity.Property(e => e.openfile2).IsUnicode(false);

                entity.Property(e => e.weight).IsUnicode(false);
            });

            modelBuilder.Entity<GoodsBar>(entity =>
            {
                entity.HasKey(e => e.Bar)
                    .HasName("aaaaaGoodsBar_PK")
                    .IsClustered(false);

                entity.Property(e => e.Bar).IsUnicode(false);

                entity.Property(e => e.Bar1).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodsID).IsUnicode(false);

                entity.Property(e => e.LimitNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<GoodsMonth>(entity =>
            {
                entity.HasKey(e => new { e.Month, e.GoodID, e.SizeNo, e.Store })
                    .IsClustered(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.AdjustTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cheapen).HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonthEndCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonthFirstCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonthFirstTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShipAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShipTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum01).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum02).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum03).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum04).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum05).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum06).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum07).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum08).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum09).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum10).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum11).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum12).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum13).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum14).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum15).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum16).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageNum17).HasDefaultValueSql("((0))");

                entity.Property(e => e.StorageTotalNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxStockAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.TransferAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.TransferTotalNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GoodsSample>(entity =>
            {
                entity.HasKey(e => e.GoodID)
                    .HasName("aaaaaGoodsSample_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.BuyMode).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheapenPrice).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryGoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.InsideMaterial).IsUnicode(false);

                entity.Property(e => e.Material).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.PicturePath).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.Sign).IsUnicode(false);

                entity.Property(e => e.SizeNo1).IsUnicode(false);

                entity.Property(e => e.SizeNo2).IsUnicode(false);

                entity.Property(e => e.SizeNo3).IsUnicode(false);

                entity.Property(e => e.Sort01).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.Sort03).IsUnicode(false);

                entity.Property(e => e.Sort04).IsUnicode(false);

                entity.Property(e => e.Sort05).IsUnicode(false);
            });

            modelBuilder.Entity<GroupProgram>(entity =>
            {
                entity.HasKey(e => new { e.Group_Name, e.Program_Name })
                    .HasName("aaaaaGroupProgram_PK")
                    .IsClustered(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Program_Name).IsUnicode(false);

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cost_Flag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Delete_Flag).IsUnicode(false);

                entity.Property(e => e.Edit_Flag).IsUnicode(false);

                entity.Property(e => e.Insert_Flag).IsUnicode(false);

                entity.Property(e => e.Money_Flag).IsUnicode(false);

                entity.Property(e => e.Print_Flag).IsUnicode(false);

                entity.Property(e => e.View_Flag).IsUnicode(false);
            });

            modelBuilder.Entity<HCTTitle>(entity =>
            {
                entity.HasKey(e => new { e.SDate, e.IDOld });

                entity.Property(e => e.SDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IDOld)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Infonation>(entity =>
            {
                entity.Property(e => e.InfoID).ValueGeneratedNever();

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InfoText)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<InvoiceSet>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceMonth, e.MinInvoice });

                entity.Property(e => e.InvoiceMonth)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MinInvoice)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AppID).IsUnicode(false);

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvTerm).IsUnicode(false);

                entity.Property(e => e.InvoiceID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MachineID).IsUnicode(false);

                entity.Property(e => e.MachineNo).IsUnicode(false);

                entity.Property(e => e.MaxInvoice)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OBU)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Store)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.qrApiKey).IsUnicode(false);
            });

            modelBuilder.Entity<KTJTitle>(entity =>
            {
                entity.HasKey(e => new { e.SDate, e.IDOld });

                entity.Property(e => e.SDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IDOld)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<LastBPUPList>(entity =>
            {
                entity.HasKey(e => new { e.LastDateTime, e.LastBPUPListID });

                entity.Property(e => e.LastBPUPListID).IsUnicode(false);
            });

            modelBuilder.Entity<LogOutEInvALLCancelNo>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvNum)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<LogOutEInvCancelNo>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvNum)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MCommInStore>(entity =>
            {
                entity.HasKey(e => new { e.CommID, e.Item })
                    .HasName("aaaaaMCommInStore_PK")
                    .IsClustered(false);

                entity.Property(e => e.CommID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CommDate).IsUnicode(false);

                entity.Property(e => e.CommMode).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.InStoreID).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProcessName).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.ProduceItem).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MCommProduce>(entity =>
            {
                entity.HasKey(e => new { e.ProduceID, e.Item })
                    .HasName("aaaaaMCommProduce_PK")
                    .IsClustered(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EstDate).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.InStoreFlag).IsUnicode(false);

                entity.Property(e => e.OutStore).IsUnicode(false);

                entity.Property(e => e.PreProduceID).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProcessName).IsUnicode(false);

                entity.Property(e => e.ProduceDate).IsUnicode(false);

                entity.Property(e => e.ProduceFlag).IsUnicode(false);

                entity.Property(e => e.ProduceUnit).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SendDate).IsUnicode(false);

                entity.Property(e => e.SendFlag).IsUnicode(false);

                entity.Property(e => e.SizeNO).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);
            });

            modelBuilder.Entity<MCommTakeM>(entity =>
            {
                entity.HasKey(e => new { e.TakeID, e.Item })
                    .HasName("aaaaaMCommTakeM_PK")
                    .IsClustered(false);

                entity.Property(e => e.TakeID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.ProductItem).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.TakeDate).IsUnicode(false);

                entity.Property(e => e.TakeFlag).IsUnicode(false);

                entity.Property(e => e.TakeMode).IsUnicode(false);
            });

            modelBuilder.Entity<MEmpInStore>(entity =>
            {
                entity.HasKey(e => new { e.EmpInID, e.Item })
                    .HasName("aaaaaMEmpInStore_PK")
                    .IsClustered(false);

                entity.Property(e => e.EmpInID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpInDate).IsUnicode(false);

                entity.Property(e => e.EmpInMode).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProcessName).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.ProduceItem).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<MEmpProduce>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EstDate).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.InStoreFlag).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.OutStore).IsUnicode(false);

                entity.Property(e => e.PreProduceID).IsUnicode(false);

                entity.Property(e => e.ProEmpID).IsUnicode(false);

                entity.Property(e => e.ProEmpName).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProcessName).IsUnicode(false);

                entity.Property(e => e.ProduceDate).IsUnicode(false);

                entity.Property(e => e.ProduceFlag).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.ProduceUnit).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SendDate).IsUnicode(false);

                entity.Property(e => e.SendFlag).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.StyleFlag).IsUnicode(false);
            });

            modelBuilder.Entity<MEmpTakeM>(entity =>
            {
                entity.HasKey(e => new { e.TakeID, e.Item })
                    .HasName("aaaaaMEmpTakeM_PK")
                    .IsClustered(false);

                entity.Property(e => e.TakeID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.ProductItem).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.TakeDate).IsUnicode(false);

                entity.Property(e => e.TakeFlag).IsUnicode(false);

                entity.Property(e => e.TakeMode).IsUnicode(false);
            });

            modelBuilder.Entity<MGather>(entity =>
            {
                entity.HasKey(e => e.GatherID)
                    .HasName("aaaaaMGather_PK")
                    .IsClustered(false);

                entity.Property(e => e.GatherID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DN05).IsUnicode(false);

                entity.Property(e => e.EndBrandID).IsUnicode(false);

                entity.Property(e => e.GatherAccount).IsUnicode(false);

                entity.Property(e => e.GatherBank).IsUnicode(false);

                entity.Property(e => e.GatherDate).IsUnicode(false);

                entity.Property(e => e.GatherPerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StartBrandID).IsUnicode(false);
            });

            modelBuilder.Entity<MGatherDetail>(entity =>
            {
                entity.HasKey(e => new { e.GatherID, e.Item })
                    .HasName("aaaaaMGatherDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.GatherID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.GatherMode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipID).IsUnicode(false);
            });

            modelBuilder.Entity<MMaterial>(entity =>
            {
                entity.HasKey(e => e.MaterialID)
                    .HasName("aaaaaMMaterial_PK")
                    .IsClustered(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.BarCode).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.PicPath).IsUnicode(false);

                entity.Property(e => e.PorductFlag).IsUnicode(false);

                entity.Property(e => e.Season).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.Sort03).IsUnicode(false);

                entity.Property(e => e.Sort04).IsUnicode(false);

                entity.Property(e => e.Sort05).IsUnicode(false);

                entity.Property(e => e.Unit).IsUnicode(false);
            });

            modelBuilder.Entity<MMaterialMonth>(entity =>
            {
                entity.HasKey(e => new { e.Month, e.MaterialID, e.Store })
                    .HasName("aaaaaMMaterialMonth_PK")
                    .IsClustered(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MMaterialStore>(entity =>
            {
                entity.HasKey(e => new { e.MaterialID, e.StoreID, e.SizeNo })
                    .HasName("aaaaaMMaterialStore_PK")
                    .IsClustered(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StorageSign).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.StoreShelfID).IsUnicode(false);
            });

            modelBuilder.Entity<MMaterialStruct>(entity =>
            {
                entity.HasKey(e => new { e.MainMaterialID, e.MaterialID })
                    .HasName("aaaaaMMaterialStruct_PK")
                    .IsClustered(false);

                entity.Property(e => e.MainMaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SizeX).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);
            });

            modelBuilder.Entity<MModify>(entity =>
            {
                entity.HasKey(e => new { e.ModifyID, e.Item })
                    .HasName("aaaaaMModify_PK")
                    .IsClustered(false);

                entity.Property(e => e.ModifyID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.ModifyDate).IsUnicode(false);

                entity.Property(e => e.ModifyFlag).IsUnicode(false);

                entity.Property(e => e.ModifyStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MOrders>(entity =>
            {
                entity.HasKey(e => new { e.OrderID, e.Item })
                    .HasName("aaaaaMOrders_PK")
                    .IsClustered(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.ProduceID).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<MPay>(entity =>
            {
                entity.HasKey(e => e.PayID)
                    .HasName("aaaaaMPay_PK")
                    .IsClustered(false);

                entity.Property(e => e.PayID).IsUnicode(false);

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.EndBrandID).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.PayBank).IsUnicode(false);

                entity.Property(e => e.PayDate).IsUnicode(false);

                entity.Property(e => e.PayPerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StartBrandID).IsUnicode(false);
            });

            modelBuilder.Entity<MPayDetail>(entity =>
            {
                entity.HasKey(e => new { e.PayID, e.Item })
                    .HasName("aaaaaMPayDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.PayID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockID).IsUnicode(false);
            });

            modelBuilder.Entity<MPreProduct>(entity =>
            {
                entity.HasKey(e => new { e.PreProductID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.PreProductID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.FaceFlag).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OutStore).IsUnicode(false);

                entity.Property(e => e.PreDate).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MProcess>(entity =>
            {
                entity.HasKey(e => e.ProcessID)
                    .HasName("aaaaaMProcess_PK")
                    .IsClustered(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.ProcessName).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);
            });

            modelBuilder.Entity<MPurchase>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseID, e.Item })
                    .HasName("aaaaaMPurchase_PK")
                    .IsClustered(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseFactory).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MShip>(entity =>
            {
                entity.HasKey(e => e.ShipID)
                    .HasName("aaaaaMShip_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeFlag).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);
            });

            modelBuilder.Entity<MShipDetail>(entity =>
            {
                entity.HasKey(e => new { e.ShipID, e.Item })
                    .HasName("aaaaaMShipDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderItem).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MStgCheck>(entity =>
            {
                entity.HasKey(e => new { e.CheckDate, e.CheckStore, e.MaterialID, e.SizeNo })
                    .HasName("aaaaaMStgCheck_PK")
                    .IsClustered(false);

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.CheckStore).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckFlag).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);
            });

            modelBuilder.Entity<MStock>(entity =>
            {
                entity.HasKey(e => e.StockID)
                    .HasName("aaaaaMStock_PK")
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeMode).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryStockID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<MStockDetail>(entity =>
            {
                entity.HasKey(e => new { e.StockID, e.Item })
                    .HasName("aaaaaMStockDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CloseMoth).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryStockID).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<MStyleStruct>(entity =>
            {
                entity.HasKey(e => new { e.GoodID, e.SizeNo, e.MaterialID })
                    .HasName("aaaaaMStyleStruct_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.ProcessID).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeX).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);
            });

            modelBuilder.Entity<MaterialSamplePicture>(entity =>
            {
                entity.Property(e => e.MaterialID).IsUnicode(false);
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.Advice).IsUnicode(false);

                entity.Property(e => e.Brand01).IsUnicode(false);

                entity.Property(e => e.Brand02).IsUnicode(false);

                entity.Property(e => e.Brand03).IsUnicode(false);

                entity.Property(e => e.BrandKnow).IsUnicode(false);

                entity.Property(e => e.Brith).IsUnicode(false);

                entity.Property(e => e.BuyGood).IsUnicode(false);

                entity.Property(e => e.BuyMode).IsUnicode(false);

                entity.Property(e => e.Card91ID).IsUnicode(false);

                entity.Property(e => e.CardClass).IsUnicode(false);

                entity.Property(e => e.CardPerson).IsUnicode(false);

                entity.Property(e => e.CensusAddr1).IsUnicode(false);

                entity.Property(e => e.CensusAddr2).IsUnicode(false);

                entity.Property(e => e.CensusAddr3).IsUnicode(false);

                entity.Property(e => e.CensusAddr4).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.Condition).IsUnicode(false);

                entity.Property(e => e.ContactAddr1).IsUnicode(false);

                entity.Property(e => e.ContactAddr2).IsUnicode(false);

                entity.Property(e => e.ContactAddr3).IsUnicode(false);

                entity.Property(e => e.ContactAddr4).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.EduLevel).IsUnicode(false);

                entity.Property(e => e.EffectDate).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.FirstStore).IsUnicode(false);

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdCard)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Major).IsUnicode(false);

                entity.Property(e => e.Married).IsUnicode(false);

                entity.Property(e => e.MemEmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberName).IsUnicode(false);

                entity.Property(e => e.Mobil).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.PrintFlag).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SDBirthday1).IsUnicode(false);

                entity.Property(e => e.SDBirthday2).IsUnicode(false);

                entity.Property(e => e.SDBirthday3).IsUnicode(false);

                entity.Property(e => e.SDBirthday4).IsUnicode(false);

                entity.Property(e => e.SDName1).IsUnicode(false);

                entity.Property(e => e.SDName2).IsUnicode(false);

                entity.Property(e => e.SDName3).IsUnicode(false);

                entity.Property(e => e.SDName4).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.ShowDate).IsUnicode(false);

                entity.Property(e => e.SubHongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.TelPhone01).IsUnicode(false);

                entity.Property(e => e.TelPhone02).IsUnicode(false);

                entity.Property(e => e.WhereToBuy).IsUnicode(false);

                entity.Property(e => e.WhichToAdd).IsUnicode(false);

                entity.Property(e => e.ZipID01).IsUnicode(false);

                entity.Property(e => e.ZipID02).IsUnicode(false);
            });

            modelBuilder.Entity<MemberCard>(entity =>
            {
                entity.HasKey(e => e.CardID)
                    .HasName("aaaaaMemberCard_PK")
                    .IsClustered(false);

                entity.Property(e => e.CardID).IsUnicode(false);

                entity.Property(e => e.BirthMode).IsUnicode(false);

                entity.Property(e => e.BirthSort).IsUnicode(false);

                entity.Property(e => e.BirthWay).IsUnicode(false);

                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.Card91ID).IsUnicode(false);

                entity.Property(e => e.CardName).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ContinueAmount).HasDefaultValueSql("('')");

                entity.Property(e => e.Mode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PointMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SingleAmount).HasDefaultValueSql("('')");

                entity.Property(e => e.WayCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MemberGetPoint>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GetDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MemberLv>(entity =>
            {
                entity.HasKey(e => new { e.MemberID, e.SellDate, e.Mode });

                entity.Property(e => e.MemberID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CardIDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.contactaddr4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.contactaddr4New)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.effectdate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.effectdateNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MemberOrder>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseID, e.PurchaseItem })
                    .HasName("aaaaaMemberOrder_PK")
                    .IsClustered(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.MemberName).IsUnicode(false);

                entity.Property(e => e.OrderID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellItem).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<MemberWork>(entity =>
            {
                entity.HasKey(e => new { e.WorkID, e.Item })
                    .HasName("aaaaaMemberWork_PK")
                    .IsClustered(false);

                entity.Property(e => e.WorkID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.FinishMode).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.IntoMode).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.P832).IsUnicode(false);

                entity.Property(e => e.P833).IsUnicode(false);

                entity.Property(e => e.PreWorkDate).IsUnicode(false);

                entity.Property(e => e.PreWorkID).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Sign).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.WordMode).IsUnicode(false);

                entity.Property(e => e.WorkPerson).IsUnicode(false);

                entity.Property(e => e.WorkPersonID).IsUnicode(false);

                entity.Property(e => e.WorkSpace).IsUnicode(false);
            });

            modelBuilder.Entity<Member_DEL>(entity =>
            {
                entity.HasKey(e => e.SerialID)
                    .HasName("aaaaaMember_DEL_PK")
                    .IsClustered(false);

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Person)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MidPov232Tmp>(entity =>
            {
                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.CreditID).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.KindID).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.UniteID).IsUnicode(false);
            });

            modelBuilder.Entity<MidShipTableATmp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<MidShipTableBTmp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms208Tmp>(entity =>
            {
                entity.Property(e => e.CNAME).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.DealDate).IsUnicode(false);

                entity.Property(e => e.DealModeID).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.FootID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Non_Tax).HasDefaultValueSql("((0))");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderItem).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.R1).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);

                entity.Property(e => e.TaxPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms211DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms211Tmp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms212DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.WorkDate).IsUnicode(false);
            });

            modelBuilder.Entity<Mms212Tmp>(entity =>
            {
                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.WorkDate).IsUnicode(false);
            });

            modelBuilder.Entity<Mms213ATmp>(entity =>
            {
                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms213DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms213Tmp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms214ATmp>(entity =>
            {
                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms214DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms214Tmp>(entity =>
            {
                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.MaterialName).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms215Temp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.In_Date).IsUnicode(false);

                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.Pro_Code).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms301Temp>(entity =>
            {
                entity.Property(e => e.OrderNum1).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum10).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum11).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum12).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum13).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum14).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum15).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum16).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum17).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum2).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum3).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum4).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum5).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum6).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum7).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum8).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNum9).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalOrderNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms302Temp>(entity =>
            {
                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.UserID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Mms408temp>(entity =>
            {
                entity.Property(e => e.cuscode)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Mms5081Tmp>(entity =>
            {
                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms5082Detailtmp>(entity =>
            {
                entity.Property(e => e.TP07).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms5082Totaltmp>(entity =>
            {
                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms509Tmp>(entity =>
            {
                entity.Property(e => e.MaterialID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Mms6121BTemp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);
            });

            modelBuilder.Entity<Modify>(entity =>
            {
                entity.HasKey(e => new { e.ModifyID, e.Item })
                    .HasName("aaaaaModify_PK")
                    .IsClustered(false);

                entity.Property(e => e.ModifyID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ModifyDate).IsUnicode(false);

                entity.Property(e => e.ModifyFlag).IsUnicode(false);

                entity.Property(e => e.ModifyStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<NikeTab1>(entity =>
            {
                entity.HasKey(e => new { e.TB01, e.TB02 })
                    .IsClustered(false);

                entity.Property(e => e.TB01).IsUnicode(false);

                entity.Property(e => e.TB02).IsUnicode(false);

                entity.Property(e => e.TB03).IsUnicode(false);
            });

            modelBuilder.Entity<NikeTab2>(entity =>
            {
                entity.HasKey(e => new { e.TB01, e.TB02 })
                    .IsClustered(false);

                entity.Property(e => e.TB01).IsUnicode(false);

                entity.Property(e => e.TB02).IsUnicode(false);

                entity.Property(e => e.TB03).IsUnicode(false);
            });

            modelBuilder.Entity<NikeTab3>(entity =>
            {
                entity.HasKey(e => new { e.TB01, e.TB02 })
                    .IsClustered(false);

                entity.Property(e => e.TB01).IsUnicode(false);

                entity.Property(e => e.TB02).IsUnicode(false);

                entity.Property(e => e.TB03).IsUnicode(false);
            });

            modelBuilder.Entity<OldGoodSpecial>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndBrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndFactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndSeason)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndSort01ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.HongLiTimes).HasDefaultValueSql("((0))");

                entity.Property(e => e.KDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartBrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartFactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartSeason)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartSort01ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OldGoodSpecialA>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndBrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndFactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndSeason)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndSort01ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.HongLiTimes).HasDefaultValueSql("((0))");

                entity.Property(e => e.KDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartBrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartCardID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartFactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartSeason)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartSort01ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => new { e.OrderID, e.Item })
                    .HasName("aaaaaOrders_PK")
                    .IsClustered(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGoodID).IsUnicode(false);

                entity.Property(e => e.ClientOrderID).IsUnicode(false);

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.CurrencyID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyRate).HasDefaultValueSql("('')");

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.DealModeID).HasDefaultValueSql("('')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.FootWorkID).IsUnicode(false);

                entity.Property(e => e.ForeignPrice).HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HeadWorkID).IsUnicode(false);

                entity.Property(e => e.IntoSign).IsUnicode(false);

                entity.Property(e => e.IsCheck)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewTaxAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.OrderStore).IsUnicode(false);

                entity.Property(e => e.P_StyleC)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkID).IsUnicode(false);

                entity.Property(e => e.WorkItem).IsUnicode(false);
            });

            modelBuilder.Entity<OtherProc>(entity =>
            {
                entity.HasKey(e => new { e.ClientID, e.Reside });

                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reside)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientShort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Display)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<OtherProcDelete>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientShort).IsUnicode(false);

                entity.Property(e => e.Display).IsUnicode(false);

                entity.Property(e => e.Reside).IsUnicode(false);
            });

            modelBuilder.Entity<OutWork>(entity =>
            {
                entity.HasKey(e => new { e.OutWorkDate, e.EmpID, e.BackDay })
                    .HasName("aaaaaOutWork_PK")
                    .IsClustered(false);

                entity.Property(e => e.OutWorkDate).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.BackDay).IsUnicode(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.OutDay).IsUnicode(false);

                entity.Property(e => e.Resean).IsUnicode(false);
            });

            modelBuilder.Entity<POV402Tmp>(entity =>
            {
                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.Group1).IsUnicode(false);

                entity.Property(e => e.Group2).IsUnicode(false);
            });

            modelBuilder.Entity<POVInOutTemp>(entity =>
            {
                entity.Property(e => e.Stock_CustName).IsUnicode(false);

                entity.Property(e => e.Stock_ID).IsUnicode(false);

                entity.Property(e => e.Stock_InOut).IsUnicode(false);

                entity.Property(e => e.Stock_Operation).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<POVInTranTemp>(entity =>
            {
                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.ID).IsUnicode(false);

                entity.Property(e => e.InOut_Date).IsUnicode(false);

                entity.Property(e => e.ModeName).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.StoreCode).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<POVShip>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.ShipID });

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.CollectionID).IsUnicode(false);

                entity.Property(e => e.DistributionID).IsUnicode(false);

                entity.Property(e => e.EMail).IsUnicode(false);

                entity.Property(e => e.Fname).IsUnicode(false);

                entity.Property(e => e.Ftel).IsUnicode(false);

                entity.Property(e => e.GroupID).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.InvoiceType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderID2).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.ShipCheckFlag).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SiteUrl).IsUnicode(false);

                entity.Property(e => e.TelNo).IsUnicode(false);

                entity.Property(e => e.UnifiedNum).IsUnicode(false);

                entity.Property(e => e.WayGoID).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.WayStoreID).IsUnicode(false);

                entity.Property(e => e.WayStoreName).IsUnicode(false);

                entity.Property(e => e.e7StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<POVShipDetail>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.ShipID, e.Item });

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ReturnShipID).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.WayGoID).IsUnicode(false);
            });

            modelBuilder.Entity<PaperSetup>(entity =>
            {
                entity.Property(e => e.PaperName).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<Pay>(entity =>
            {
                entity.HasKey(e => e.PayID)
                    .IsClustered(false);

                entity.Property(e => e.PayID).IsUnicode(false);

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.EndBrandID).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.PayBank).IsUnicode(false);

                entity.Property(e => e.PayDate).IsUnicode(false);

                entity.Property(e => e.PayPerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StartBrandID).IsUnicode(false);
            });

            modelBuilder.Entity<PayDetail>(entity =>
            {
                entity.HasKey(e => new { e.PayID, e.Item })
                    .HasName("aaaaaPayDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.PayID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockID).IsUnicode(false);
            });

            modelBuilder.Entity<Phrase>(entity =>
            {
                entity.HasKey(e => e.PhraseNo)
                    .HasName("PK__Phrase__0DBA26714B973090");

                entity.Property(e => e.PhraseNo).IsUnicode(false);

                entity.Property(e => e.ChangDate).IsUnicode(false);

                entity.Property(e => e.ChangID).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.Phrase1).IsUnicode(false);
            });

            modelBuilder.Entity<Picture>(entity =>
            {
                entity.HasKey(e => e.GoodID)
                    .HasName("aaaaaPicture_PK")
                    .IsClustered(false);

                entity.Property(e => e.GoodID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov108BTemp>(entity =>
            {
                entity.Property(e => e.AutoID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Pov121SellTemp>(entity =>
            {
                entity.Property(e => e.SellBranch)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SellDate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SellMode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.brandid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.brandname)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.goodid)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sortname)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pov125Tmp>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShelfID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Pov203Tmp>(entity =>
            {
                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipNum1).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum10).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum11).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum12).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum13).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum14).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum15).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum16).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum17).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum2).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum3).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum4).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum5).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum6).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum7).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum8).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipNum9).HasDefaultValueSql("('')");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov207Temp>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ParchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov208Tmp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.fid).IsUnicode(false);
            });

            modelBuilder.Entity<Pov210DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.PreDealDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov210Tmp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.PreDealDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov211DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.GoodsID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.WorkDate).IsUnicode(false);
            });

            modelBuilder.Entity<Pov211Tmp>(entity =>
            {
                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PriceL).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.WorkDate).IsUnicode(false);
            });

            modelBuilder.Entity<Pov212ATmp>(entity =>
            {
                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov212DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FindID).ValueGeneratedOnAdd();

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.PreDealDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov212Tmp>(entity =>
            {
                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientShort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.PreDealDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchasePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.Season)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov213ATmp>(entity =>
            {
                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov213DetailTmp>(entity =>
            {
                entity.Property(e => e.Amount).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.FindID).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Num1).IsUnicode(false);

                entity.Property(e => e.Num10).IsUnicode(false);

                entity.Property(e => e.Num11).IsUnicode(false);

                entity.Property(e => e.Num12).IsUnicode(false);

                entity.Property(e => e.Num13).IsUnicode(false);

                entity.Property(e => e.Num14).IsUnicode(false);

                entity.Property(e => e.Num15).IsUnicode(false);

                entity.Property(e => e.Num16).IsUnicode(false);

                entity.Property(e => e.Num17).IsUnicode(false);

                entity.Property(e => e.Num2).IsUnicode(false);

                entity.Property(e => e.Num3).IsUnicode(false);

                entity.Property(e => e.Num4).IsUnicode(false);

                entity.Property(e => e.Num5).IsUnicode(false);

                entity.Property(e => e.Num6).IsUnicode(false);

                entity.Property(e => e.Num7).IsUnicode(false);

                entity.Property(e => e.Num8).IsUnicode(false);

                entity.Property(e => e.Num9).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.TotalNum).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov213Tmp>(entity =>
            {
                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientShort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName).IsUnicode(false);

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.Season)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov217Tmp>(entity =>
            {
                entity.Property(e => e.Date).IsUnicode(false);

                entity.Property(e => e.ID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov219temp>(entity =>
            {
                entity.Property(e => e.ChangDate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ChangID)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CustID)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InvoiceID)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipDate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipID)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pov224Tmp>(entity =>
            {
                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.OrderDate).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov225Tmp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov227Temp>(entity =>
            {
                entity.Property(e => e.Kind).IsUnicode(false);
            });

            modelBuilder.Entity<Pov232Tmp>(entity =>
            {
                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.EndInvoiceID).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.KindID).IsUnicode(false);

                entity.Property(e => e.StartInvoiceID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov242Temp>(entity =>
            {
                entity.Property(e => e.BuyClientID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov271Temp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.KindID).IsUnicode(false);

                entity.Property(e => e.KindName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov272Tmp>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.DRemark).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.EntryPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TradeDistributeGoodsSerialID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov408tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov409Detailtmp>(entity =>
            {
                entity.Property(e => e.AutoID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TP07).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov409Totaltmp>(entity =>
            {
                entity.Property(e => e.TP03).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP04).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP05).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP06).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP07).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP08).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP09).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP10).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP11).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP12).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP13).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP14).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP15).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP16).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP17).HasDefaultValueSql("((0))");

                entity.Property(e => e.TP18).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov412temp>(entity =>
            {
                entity.Property(e => e.useID)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pov413Tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov414Tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.ShelfID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov415Tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov418tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov419Tmp>(entity =>
            {
                entity.Property(e => e.EndSort1Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort1Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort2Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort2Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort3Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort3Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort4Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndSort4Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort1Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort1Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort2Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort2Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort3Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort3Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort4Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstSort4Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort1Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort1Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort2Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort2Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort3Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort3Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort4Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellSort4Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort1Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort1Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort2Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort2Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort3Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort3Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort4Amount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockSort4Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov502CalSort>(entity =>
            {
                entity.Property(e => e.CheckFlag).IsUnicode(false);

                entity.Property(e => e.Flag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.InFlag).IsUnicode(false);

                entity.Property(e => e.ModiFlag).IsUnicode(false);

                entity.Property(e => e.OutFlag).IsUnicode(false);

                entity.Property(e => e.SellFlag).IsUnicode(false);

                entity.Property(e => e.StoreFlag).IsUnicode(false);

                entity.Property(e => e.TranInFlag).IsUnicode(false);

                entity.Property(e => e.TranOutFlag).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov502Temp>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.MySellFlagA)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MySellFlagB)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Pov503Temp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.ClientID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientShort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DiscountPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.FactAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPercentSell).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPercentShip).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPercentTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Multi).HasDefaultValueSql("((0))");

                entity.Property(e => e.NonTax).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.ParentID).IsUnicode(false);

                entity.Property(e => e.ProfitPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SellCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellFlag).IsUnicode(false);

                entity.Property(e => e.SellNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellProfit).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShouldAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov504Temp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.MainStNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderNoDeal).HasDefaultValueSql("((0))");

                entity.Property(e => e.PurNoDeal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort01).IsUnicode(false);

                entity.Property(e => e.Sort02).IsUnicode(false);

                entity.Property(e => e.Sort03).IsUnicode(false);

                entity.Property(e => e.Sort04).IsUnicode(false);

                entity.Property(e => e.Sort05).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.TotalCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalGrain).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pov505Temp>(entity =>
            {
                entity.Property(e => e.AmountPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.BuNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.FirstSellDate).IsUnicode(false);

                entity.Property(e => e.FirstShipDate).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.MonthPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonthStockNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoSellDay).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.ProfitPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.PuNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.RotateMonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.RotateStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SellAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellDay).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellProfit).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.SubGoodID).IsUnicode(false);

                entity.Property(e => e.SubGoodName).IsUnicode(false);

                entity.Property(e => e.SubStoreID).IsUnicode(false);

                entity.Property(e => e.SubStoreName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov506Temp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.DiscountPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Multi).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SellCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellProfit).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShouldAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov507Temp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.FirstShipDate).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.MonthStockNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.MultiSellMonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.MultiSellStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoSellDay).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenDate).IsUnicode(false);

                entity.Property(e => e.ProfitPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SellAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellDay).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellProfit).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov508Tmp>(entity =>
            {
                entity.Property(e => e.AutoID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov510Tmp>(entity =>
            {
                entity.Property(e => e.ActiveMonth).IsUnicode(false);

                entity.Property(e => e.CompareMonth).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.People).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov511Tmp>(entity =>
            {
                entity.Property(e => e.ActiveMonth).IsUnicode(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.BranchName).IsUnicode(false);

                entity.Property(e => e.CompareMonth).IsUnicode(false);

                entity.Property(e => e.People).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov512Tmp>(entity =>
            {
                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.SellBranch).IsUnicode(false);

                entity.Property(e => e.SellDate).IsUnicode(false);

                entity.Property(e => e.UntaxCard).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxDis).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxEight).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxFive).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxFour).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxNine).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxOne).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxSell).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxSeven).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxSix).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxTen).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxThree).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.UntaxTwo).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov513Temp>(entity =>
            {
                entity.Property(e => e.AdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GrossProfit).HasDefaultValueSql("((0))");

                entity.Property(e => e.Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceLName).IsUnicode(false);

                entity.Property(e => e.SpecialPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.TotalCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov514Temp>(entity =>
            {
                entity.Property(e => e.CheckMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory1Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory1Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory2Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory2Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory3Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory3Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory4Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory4Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory5Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory5Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.FirstMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.GapMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.InMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.OutMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellCardMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellCashMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellGiftMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort1Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort2Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort3Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort4Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sort5Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time10Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time10Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time11Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time11Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time12Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time12Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time13Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time13Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time1Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time1Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time2Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time2Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time3Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time3Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time4Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time4Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time5Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time5Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time6Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time6Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time7Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time7Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time8Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time8Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time9Count).HasDefaultValueSql("((0))");

                entity.Property(e => e.Time9Money).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSell).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSellMoney).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalStorage).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalStorageMoney).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Pov516Temp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.InDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov517Temp>(entity =>
            {
                entity.Property(e => e.ClassID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.Names).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov518Temp>(entity =>
            {
                entity.Property(e => e.ClassID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.Names).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov519Temp>(entity =>
            {
                entity.Property(e => e.ClassID).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.Kind).IsUnicode(false);

                entity.Property(e => e.Names).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.SortName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov5201ATemp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov5201BTemp>(entity =>
            {
                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov5202Temp>(entity =>
            {
                entity.Property(e => e.OutID).IsUnicode(false);

                entity.Property(e => e.Rotate1).IsUnicode(false);

                entity.Property(e => e.Rotate10).IsUnicode(false);

                entity.Property(e => e.Rotate11).IsUnicode(false);

                entity.Property(e => e.Rotate12).IsUnicode(false);

                entity.Property(e => e.Rotate13).IsUnicode(false);

                entity.Property(e => e.Rotate2).IsUnicode(false);

                entity.Property(e => e.Rotate3).IsUnicode(false);

                entity.Property(e => e.Rotate4).IsUnicode(false);

                entity.Property(e => e.Rotate5).IsUnicode(false);

                entity.Property(e => e.Rotate6).IsUnicode(false);

                entity.Property(e => e.Rotate7).IsUnicode(false);

                entity.Property(e => e.Rotate8).IsUnicode(false);

                entity.Property(e => e.Rotate9).IsUnicode(false);

                entity.Property(e => e.SellDiscount).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov523Temp>(entity =>
            {
                entity.Property(e => e.AmountPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.BrandID).IsUnicode(false);

                entity.Property(e => e.BrandName).IsUnicode(false);

                entity.Property(e => e.Class1ID).IsUnicode(false);

                entity.Property(e => e.Class1Name).IsUnicode(false);

                entity.Property(e => e.Class2ID).IsUnicode(false);

                entity.Property(e => e.Class2Name).IsUnicode(false);

                entity.Property(e => e.Class3ID).IsUnicode(false);

                entity.Property(e => e.Class3Name).IsUnicode(false);

                entity.Property(e => e.Class4ID).IsUnicode(false);

                entity.Property(e => e.Class4Name).IsUnicode(false);

                entity.Property(e => e.Class5ID).IsUnicode(false);

                entity.Property(e => e.Class5Name).IsUnicode(false);

                entity.Property(e => e.EmpID).IsUnicode(false);

                entity.Property(e => e.EmpName).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.FactoryShort).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.NoTaxAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Season)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockPercent).HasDefaultValueSql("((0))");

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov576Tmp>(entity =>
            {
                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.ClientShort).IsUnicode(false);

                entity.Property(e => e.Flag).IsUnicode(false);

                entity.Property(e => e.GroupFldID).IsUnicode(false);

                entity.Property(e => e.GroupFldName).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov581Tmp>(entity =>
            {
                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Pov610temp>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TranInStore).IsUnicode(false);

                entity.Property(e => e.TranOutStore).IsUnicode(false);
            });

            modelBuilder.Entity<PreAchieve>(entity =>
            {
                entity.HasKey(e => new { e.StoreID, e.Month })
                    .HasName("aaaaaPreAchieve_PK")
                    .IsClustered(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.Month).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<PreArchieveSetting>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item })
                    .HasName("aaaaaPreArchieveSetting_PK")
                    .IsClustered(false);

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrandID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Months)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort01ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sort02ID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SortID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SortType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PrePurchase>(entity =>
            {
                entity.HasKey(e => new { e.PrePurchaseID, e.Item })
                    .HasName("aaaaaPrePurchase_PK")
                    .IsClustered(false);

                entity.Property(e => e.PrePurchaseID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PrePurchaseDate).IsUnicode(false);

                entity.Property(e => e.PrePurchaseFactory).IsUnicode(false);

                entity.Property(e => e.PrePurchaseMode).IsUnicode(false);

                entity.Property(e => e.PrePurchaseStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<PreStock>(entity =>
            {
                entity.HasKey(e => e.PreStockID)
                    .HasName("aaaaaPreStock_PK")
                    .IsClustered(false);

                entity.Property(e => e.PreStockID).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeMode).IsUnicode(false);

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.PreStockDate).IsUnicode(false);

                entity.Property(e => e.PreStockFactory).IsUnicode(false);

                entity.Property(e => e.PreStockMode).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StockStore).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);
            });

            modelBuilder.Entity<PreStockDetail>(entity =>
            {
                entity.HasKey(e => new { e.PreStockID, e.Item })
                    .HasName("aaaaaPreStockDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.PreStockID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.PreStockDate).IsUnicode(false);

                entity.Property(e => e.PreStockFactory).IsUnicode(false);

                entity.Property(e => e.PreStockMode).IsUnicode(false);

                entity.Property(e => e.PreStockStore).IsUnicode(false);

                entity.Property(e => e.PurchaseFlag).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.StockItem).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<PreStore>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item })
                    .HasName("aaaaaPreStore_PK")
                    .IsClustered(false);

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HavePurchaseFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RemarkD)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SortState)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TypeName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PreTransfer>(entity =>
            {
                entity.HasKey(e => new { e.PreTranID, e.Item })
                    .HasName("aaaaaPreTransfer_PK")
                    .IsClustered(false);

                entity.Property(e => e.PreTranID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.PreTranDate).IsUnicode(false);

                entity.Property(e => e.PreTranInStore).IsUnicode(false);

                entity.Property(e => e.PreTranOutStore).IsUnicode(false);

                entity.Property(e => e.RecordFlag).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<PriceAdjust>(entity =>
            {
                entity.Property(e => e.AdjustMonth).IsUnicode(false);

                entity.Property(e => e.AdjustStore).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Sign).IsUnicode(false);
            });

            modelBuilder.Entity<PriceL>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.PriceID).IsUnicode(false);

                entity.Property(e => e.PriceName).IsUnicode(false);
            });

            modelBuilder.Entity<ProgramTask>(entity =>
            {
                entity.HasKey(e => e.TaskID)
                    .IsClustered(false);

                entity.Property(e => e.TaskID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Command)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreateDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DaysOfMonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.DaysOfWeek).HasDefaultValueSql("((0))");

                entity.Property(e => e.Distance0).HasDefaultValueSql("((0))");

                entity.Property(e => e.Distance1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Distance2).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExePath)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.Scheme).HasDefaultValueSql("((0))");

                entity.Property(e => e.TaskName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Purchase>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseID, e.Item })
                    .HasName("aaaaaPurchase_PK")
                    .IsClustered(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.AdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyID).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.FineDate).IsUnicode(false);

                entity.Property(e => e.ForeignCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.IsCheck)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewTaxAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.P_StyleC)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.PreStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseDate).IsUnicode(false);

                entity.Property(e => e.PurchaseFactory).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.PurchasePerson01).IsUnicode(false);

                entity.Property(e => e.PurchasePerson02).IsUnicode(false);

                entity.Property(e => e.PurchaseStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Remark01).IsUnicode(false);

                entity.Property(e => e.Remark02).IsUnicode(false);

                entity.Property(e => e.Remark03).IsUnicode(false);

                entity.Property(e => e.Remark04).IsUnicode(false);

                entity.Property(e => e.Remark05).IsUnicode(false);

                entity.Property(e => e.Season)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TaxFlag).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);

                entity.Property(e => e.YuPeiHuoFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Receipts>(entity =>
            {
                entity.HasKey(e => new { e.ReceiptsID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.ReceiptsID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CurrencyID).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.PreDealDate).IsUnicode(false);

                entity.Property(e => e.ReceiptsDate).IsUnicode(false);

                entity.Property(e => e.ReceiptsFactory).IsUnicode(false);

                entity.Property(e => e.ReceiptsMode).IsUnicode(false);

                entity.Property(e => e.ReceiptsPerson01).IsUnicode(false);

                entity.Property(e => e.ReceiptsPerson02).IsUnicode(false);

                entity.Property(e => e.ReceiptsStore).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TaxFlag).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);
            });

            modelBuilder.Entity<Require>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AssociateID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AssociateItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CancelFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DealFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DealLevel).IsUnicode(false);

                entity.Property(e => e.DistributeGoodsSerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FRItem).IsUnicode(false);

                entity.Property(e => e.FRSerialID).IsUnicode(false);

                entity.Property(e => e.FillDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.LimitDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OKItem).IsUnicode(false);

                entity.Property(e => e.OKSerialID).IsUnicode(false);

                entity.Property(e => e.OrderRequireID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderRequireItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OutStoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequireID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SetLv)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Size)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.State)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.StoreId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TrFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TuiZhuanFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<RequireRecord>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreId)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<RptSet>(entity =>
            {
                entity.HasKey(e => new { e.RptName, e.WorkStation, e.PrinterName })
                    .HasName("aaaaaRptSet_PK")
                    .IsClustered(false);

                entity.Property(e => e.RptName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorkStation)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PrinterName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SMSgo>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Content)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmpID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.EstDate).IsUnicode(false);

                entity.Property(e => e.EstTime).IsUnicode(false);

                entity.Property(e => e.GiftSortFlag).IsUnicode(false);

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.People)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SMSSortFlag).IsUnicode(false);

                entity.Property(e => e.StartDate).IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SMSgoDetail>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.ReceiverName, e.PhoneNo });

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.ReceiverName).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.Content).IsUnicode(false);
            });

            modelBuilder.Entity<SMSgoMemDet>(entity =>
            {
                entity.HasKey(e => new { e.SMSgoID, e.MemberID });

                entity.Property(e => e.SMSgoID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Flag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mobil)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SendDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SendTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.msg)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Sell>(entity =>
            {
                entity.HasKey(e => new { e.SellID, e.Item })
                    .HasName("aaaaaSell_PK")
                    .IsClustered(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.A4PriceSort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdvicePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.Age)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AloneFlag).IsUnicode(false);

                entity.Property(e => e.BSellInvoice).IsUnicode(false);

                entity.Property(e => e.BackEInvID).IsUnicode(false);

                entity.Property(e => e.BackSellID).IsUnicode(false);

                entity.Property(e => e.BackSellItem).IsUnicode(false);

                entity.Property(e => e.BirthMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.BrithMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcuMember).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChouChengDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.Color)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GSortGroup).IsUnicode(false);

                entity.Property(e => e.Gender)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GetPoint).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.GspecialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.HongLiMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLiTimes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ID).IsUnicode(false);

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.IsCalFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Major).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.MemberName).IsUnicode(false);

                entity.Property(e => e.OrderID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreDate).IsUnicode(false);

                entity.Property(e => e.ProductSerialID).HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.RegistrationCode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RemarkDet).IsUnicode(false);

                entity.Property(e => e.SM_GiftNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SM_TypeID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.S_SellPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.S_Value).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellBranch).IsUnicode(false);

                entity.Property(e => e.SellDate).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SellPerson).IsUnicode(false);

                entity.Property(e => e.SellReturnsID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellStore).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShouldSellPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.T4Discount).HasDefaultValueSql("('')");

                entity.Property(e => e.T5chkComply)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ZHBatchID).IsUnicode(false);

                entity.Property(e => e.ZHBatchItem).IsUnicode(false);

                entity.Property(e => e.ZuHeID).IsUnicode(false);

                entity.Property(e => e.ZuHeTypeName).IsUnicode(false);

                entity.Property(e => e.birthdayMember).IsUnicode(false);
            });

            modelBuilder.Entity<SellChange>(entity =>
            {
                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldMemberID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldSellPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldSellStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SellChangeAmount>(entity =>
            {
                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Changedate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Display)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SellClosing>(entity =>
            {
                entity.HasKey(e => new { e.SellID, e.Item });

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClosingName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClosingType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WhoPayInterest)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SellDingTran>(entity =>
            {
                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.NewStore).IsUnicode(false);

                entity.Property(e => e.OldStore).IsUnicode(false);

                entity.Property(e => e.PlatformName).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.TransactionID).IsUnicode(false);
            });

            modelBuilder.Entity<SellInvoice>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceID, e.SellID, e.UniqueID });

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.UniqueID).IsUnicode(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.Buyer)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CancelFlag).IsUnicode(false);

                entity.Property(e => e.CardType).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CreditID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GiftType).IsUnicode(false);

                entity.Property(e => e.InvoiceBranch).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.InvoiceSort)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceTime).IsUnicode(false);

                entity.Property(e => e.Mode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.UniteID).IsUnicode(false);
            });

            modelBuilder.Entity<SellNoSaveTmp>(entity =>
            {
                entity.Property(e => e.Age).IsUnicode(false);

                entity.Property(e => e.CardType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GiftType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.GspecialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HongLi).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceKind).IsUnicode(false);

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Major).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.MemberName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoSaveID).HasDefaultValueSql("((0))");

                entity.Property(e => e.PurchaseID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SM_GiftNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SM_TypeID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.S_SellPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.S_Value).HasDefaultValueSql("((0))");

                entity.Property(e => e.SaveDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SaveTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellCash).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellNum1).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum10).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum11).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum12).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum13).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum14).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum15).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum16).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum17).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum2).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum3).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum4).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum5).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum6).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum7).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum8).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellNum9).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.ShouldSellPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SizeName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizePosition).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalSellNum).HasDefaultValueSql("((0))");

                entity.Property(e => e.ZHBatchID).IsUnicode(false);

                entity.Property(e => e.ZuHeID).IsUnicode(false);

                entity.Property(e => e.ZuHeTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<SellReturns>(entity =>
            {
                entity.Property(e => e.Age).IsUnicode(false);

                entity.Property(e => e.BSellInvoice).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.CalcuMember).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.HongLiMode).IsUnicode(false);

                entity.Property(e => e.ID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Major).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.MemberName).IsUnicode(false);

                entity.Property(e => e.PreDate).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SM_GiftNo).IsUnicode(false);

                entity.Property(e => e.SellBranch).IsUnicode(false);

                entity.Property(e => e.SellDate).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SellPerson).IsUnicode(false);

                entity.Property(e => e.SellReturnsID).IsUnicode(false);

                entity.Property(e => e.SellStore).IsUnicode(false);

                entity.Property(e => e.Sex).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.ZHBatchID).IsUnicode(false);

                entity.Property(e => e.ZHBatchItem).IsUnicode(false);

                entity.Property(e => e.ZuHeID).IsUnicode(false);

                entity.Property(e => e.ZuHeTypeName).IsUnicode(false);
            });

            modelBuilder.Entity<SellVisitorNum>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SellYahoo>(entity =>
            {
                entity.Property(e => e.PlatformID).IsUnicode(false);

                entity.Property(e => e.ReceiveAddr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReceiveMobil)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReceivePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReceiveTel1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReceiveTel2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.TradeID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.WayKind).IsUnicode(false);

                entity.Property(e => e.YaDID).IsUnicode(false);

                entity.Property(e => e.YaEDate).IsUnicode(false);

                entity.Property(e => e.YaSID).IsUnicode(false);

                entity.Property(e => e.ZipID).IsUnicode(false);
            });

            modelBuilder.Entity<Sellding>(entity =>
            {
                entity.HasKey(e => new { e.SellID, e.SellItem })
                    .IsClustered(false);

                entity.Property(e => e.SellID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Addr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DoFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Flag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemberName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Num).HasDefaultValueSql("((0))");

                entity.Property(e => e.ODFlag).IsUnicode(false);

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SellBranch)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizePosition).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEL)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransferID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransferItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WebFlag).IsUnicode(false);

                entity.Property(e => e.deliverDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.deliverTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Ship>(entity =>
            {
                entity.HasKey(e => e.ShipID)
                    .HasName("aaaaaShip_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.AutoBackID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeFlag).IsUnicode(false);

                entity.Property(e => e.CheckDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientChangePriceid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.CurrencyID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyRate).HasDefaultValueSql("('0')");

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.CustName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.DeptID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExaminesPerson).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.InMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceId).IsUnicode(false);

                entity.Property(e => e.IsCheck)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KindSend)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ManualNum).IsUnicode(false);

                entity.Property(e => e.Memo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.PickPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtDateA)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtDateB)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtDepartment)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtFactoryID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtFactoryName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtGnNum)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtOrderDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtOrderIDA)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtOrderIDB)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PtTotalNum).HasDefaultValueSql("('')");

                entity.Property(e => e.ReTurnID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Receiver)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SendAddr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SendMan)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipAddr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipNote).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);

                entity.Property(e => e.SortMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxMode).IsUnicode(false);

                entity.Property(e => e.WayCmp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayCnt).HasDefaultValueSql("('0')");

                entity.Property(e => e.WayPid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WayType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ShipDetail>(entity =>
            {
                entity.HasKey(e => new { e.ShipID, e.Item })
                    .HasName("aaaaaShipDetail_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.AutoBackID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBackItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientGoodID).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.DealModeID).HasDefaultValueSql("('')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.ForeignCost).HasDefaultValueSql("('0')");

                entity.Property(e => e.ForeignPrice).HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemoStr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewTaxAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderItem).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.P_StyleC)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remarknew).HasDefaultValueSql("('')");

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ShipDetailP>(entity =>
            {
                entity.HasKey(e => new { e.ShipID, e.Item })
                    .HasName("aaaaaShipDetailP_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientGoodID).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.OrderItem).IsUnicode(false);

                entity.Property(e => e.OrderMode).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<ShipP>(entity =>
            {
                entity.HasKey(e => e.ShipID)
                    .HasName("aaaaaShipP_PK")
                    .IsClustered(false);

                entity.Property(e => e.ShipID).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeFlag).IsUnicode(false);

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.CustID).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.InvoiceId).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ShipDate).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShipNote).IsUnicode(false);

                entity.Property(e => e.ShipStore).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);
            });

            modelBuilder.Entity<Shop>(entity =>
            {
                entity.HasKey(e => new { e.Shop1, e.StartDay, e.EndDay, e.Brand })
                    .HasName("aaaaaShop_PK")
                    .IsClustered(false);

                entity.Property(e => e.Shop1).IsUnicode(false);

                entity.Property(e => e.StartDay).IsUnicode(false);

                entity.Property(e => e.EndDay).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ShopName).IsUnicode(false);

                entity.Property(e => e._10Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e._20Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e._76Discount).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ShopDiscount>(entity =>
            {
                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.BranchMonth).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);
            });

            modelBuilder.Entity<SimpleBranchAchieve>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BranchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BranchName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SiteCollectionList>(entity =>
            {
                entity.HasKey(e => new { e.CompanyID, e.CollectionID });

                entity.Property(e => e.CollectionID).IsUnicode(false);
            });

            modelBuilder.Entity<Size>(entity =>
            {
                entity.HasKey(e => e.SizeNo)
                    .HasName("aaaaaSize_PK")
                    .IsClustered(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Size01).IsUnicode(false);

                entity.Property(e => e.Size02).IsUnicode(false);

                entity.Property(e => e.Size03).IsUnicode(false);

                entity.Property(e => e.Size04).IsUnicode(false);

                entity.Property(e => e.Size05).IsUnicode(false);

                entity.Property(e => e.Size06).IsUnicode(false);

                entity.Property(e => e.Size07).IsUnicode(false);

                entity.Property(e => e.Size08).IsUnicode(false);

                entity.Property(e => e.Size09).IsUnicode(false);

                entity.Property(e => e.Size10).IsUnicode(false);

                entity.Property(e => e.Size11).IsUnicode(false);

                entity.Property(e => e.Size12).IsUnicode(false);

                entity.Property(e => e.Size13).IsUnicode(false);

                entity.Property(e => e.Size14).IsUnicode(false);

                entity.Property(e => e.Size15).IsUnicode(false);

                entity.Property(e => e.Size16).IsUnicode(false);

                entity.Property(e => e.Size17).IsUnicode(false);
            });

            modelBuilder.Entity<SmartClientState>(entity =>
            {
                entity.Property(e => e.LocalTimes).IsUnicode(false);

                entity.Property(e => e.PreRunMode).IsUnicode(false);

                entity.Property(e => e.R_TO_L_LastDate).IsUnicode(false);
            });

            modelBuilder.Entity<Sort01>(entity =>
            {
                entity.HasKey(e => e.Sort01ID)
                    .HasName("aaaaaSort01_PK")
                    .IsClustered(false);

                entity.Property(e => e.Sort01ID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Sort01Name).IsUnicode(false);
            });

            modelBuilder.Entity<Sort02>(entity =>
            {
                entity.HasKey(e => e.Sort02ID)
                    .HasName("aaaaaSort02_PK")
                    .IsClustered(false);

                entity.Property(e => e.Sort02ID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Sort02Name).IsUnicode(false);
            });

            modelBuilder.Entity<Sort03>(entity =>
            {
                entity.HasKey(e => e.Sort03ID)
                    .HasName("aaaaaSort03_PK")
                    .IsClustered(false);

                entity.Property(e => e.Sort03ID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Sort03Name).IsUnicode(false);
            });

            modelBuilder.Entity<Sort04>(entity =>
            {
                entity.HasKey(e => e.Sort04ID)
                    .HasName("aaaaaSort04_PK")
                    .IsClustered(false);

                entity.Property(e => e.Sort04ID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Sort04Name).IsUnicode(false);
            });

            modelBuilder.Entity<Sort05>(entity =>
            {
                entity.HasKey(e => e.Sort05ID)
                    .HasName("aaaaaSort05_PK")
                    .IsClustered(false);

                entity.Property(e => e.Sort05ID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Sort05Name).IsUnicode(false);
            });

            modelBuilder.Entity<StgCheck>(entity =>
            {
                entity.HasKey(e => new { e.CheckDate, e.CheckStore, e.GoodID, e.SizeNo })
                    .HasName("aaaaaStgCheck_PK")
                    .IsClustered(false);

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.CheckStore).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckFlag).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);
            });

            modelBuilder.Entity<StgCheckDetail>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.CheckFlag).IsUnicode(false);

                entity.Property(e => e.CheckID).IsUnicode(false);

                entity.Property(e => e.CheckStore).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.remark).IsUnicode(false);
            });

            modelBuilder.Entity<Stock>(entity =>
            {
                entity.HasKey(e => e.StockID)
                    .HasName("aaaaaStock_PK")
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.AutoBackID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BLDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChangePriceID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChargeMode).IsUnicode(false);

                entity.Property(e => e.CheckDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientChangePriceid)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.Cost0).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cost1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cost2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cost3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cost4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cost5).HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrencyID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.DeptID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.IsCheck)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.PerAvgFee).HasDefaultValueSql("((0))");

                entity.Property(e => e.RealTotalAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SortMode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockFactory).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StockNote).IsUnicode(false);

                entity.Property(e => e.StockStore).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);
            });

            modelBuilder.Entity<StockDetail>(entity =>
            {
                entity.HasKey(e => new { e.StockID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.AutoBackID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBackItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoBatchItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoShipItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChangePriceID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CheckItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.DeptID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryGoodID).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.ForeignCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InMaterial)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewTaxAmt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.P_StyleC)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.RealStockAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.RealStockPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequireID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('''')");

                entity.Property(e => e.ShelfID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockFactory).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StockStore).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.StoreShelfID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<StockDetailP>(entity =>
            {
                entity.HasKey(e => new { e.StockID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.PurchaseMode).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockFactory).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StockStore).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<StockP>(entity =>
            {
                entity.HasKey(e => e.StockID)
                    .HasName("aaaaaStockP_PK")
                    .IsClustered(false);

                entity.Property(e => e.StockID).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ChargeMode).IsUnicode(false);

                entity.Property(e => e.CloseAccount).IsUnicode(false);

                entity.Property(e => e.CloseMonth).IsUnicode(false);

                entity.Property(e => e.DealMode).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FactoryID).IsUnicode(false);

                entity.Property(e => e.InvoiceDate).IsUnicode(false);

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.StockDate).IsUnicode(false);

                entity.Property(e => e.StockFactory).IsUnicode(false);

                entity.Property(e => e.StockMode).IsUnicode(false);

                entity.Property(e => e.StockNote).IsUnicode(false);

                entity.Property(e => e.StockStore).IsUnicode(false);

                entity.Property(e => e.TaxMode).IsUnicode(false);
            });

            modelBuilder.Entity<TBCalculate>(entity =>
            {
                entity.Property(e => e.Calculate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TableInfo>(entity =>
            {
                entity.HasKey(e => e.TableName)
                    .IsClustered(false);
            });

            modelBuilder.Entity<TdSalePlan>(entity =>
            {
                entity.HasKey(e => e.PlanID)
                    .HasName("aaaaaPlanID_PK")
                    .IsClustered(false);

                entity.Property(e => e.PlanID).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPlanAmt).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPlanProfit).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPlanQty).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPlanStockCost).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPlanStockQty).HasDefaultValueSql("('')");

                entity.Property(e => e.PlanBeginDate).HasDefaultValueSql("('')");

                entity.Property(e => e.PlanCode).HasDefaultValueSql("('')");

                entity.Property(e => e.PlanEndDate).HasDefaultValueSql("('')");

                entity.Property(e => e.SubjectType).HasDefaultValueSql("('')");

                entity.Property(e => e.Summary).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TdSalePlanD>(entity =>
            {
                entity.HasKey(e => new { e.PlanID, e.Item })
                    .HasName("aaaaaaPlanID_PK")
                    .IsClustered(false);

                entity.Property(e => e.PlanID).HasDefaultValueSql("('')");

                entity.Property(e => e.Item).HasDefaultValueSql("('')");

                entity.Property(e => e.Amt).HasDefaultValueSql("('')");

                entity.Property(e => e.Profit).HasDefaultValueSql("('')");

                entity.Property(e => e.Qty).HasDefaultValueSql("('')");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.SortID).HasDefaultValueSql("('')");

                entity.Property(e => e.StockCost).HasDefaultValueSql("('')");

                entity.Property(e => e.StockQty).HasDefaultValueSql("('')");

                entity.Property(e => e.SubjectCode).HasDefaultValueSql("('')");

                entity.Property(e => e.SubjectName).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TradeDistributeGoods>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.BeginClient).IsUnicode(false);

                entity.Property(e => e.BeginDate).IsUnicode(false);

                entity.Property(e => e.BeginGoodID).IsUnicode(false);

                entity.Property(e => e.BeginOperationID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CenterStoreID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.EndClient).IsUnicode(false);

                entity.Property(e => e.EndDate).IsUnicode(false);

                entity.Property(e => e.EndGoodID).IsUnicode(false);

                entity.Property(e => e.EndOperationID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntryPerson).IsUnicode(false);

                entity.Property(e => e.FinishFlag).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);
            });

            modelBuilder.Entity<TradePreShip>(entity =>
            {
                entity.HasKey(e => new { e.SerialID, e.Item });

                entity.Property(e => e.SerialID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.DRemark).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.EntryPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.OccDate).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TradeDistributeGoodsSerialID).IsUnicode(false);
            });

            modelBuilder.Entity<TransConfig>(entity =>
            {
                entity.HasKey(e => new { e.BranchID, e.TableName })
                    .IsClustered(false);

                entity.Property(e => e.BranchID).IsUnicode(false);

                entity.Property(e => e.TableName).IsUnicode(false);

                entity.Property(e => e.TableRemark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TransTemp>(entity =>
            {
                entity.Property(e => e.BarCodeData).IsUnicode(false);
            });

            modelBuilder.Entity<TransTmp>(entity =>
            {
                entity.Property(e => e.Bar).IsUnicode(false);

                entity.Property(e => e.GoodsID).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);
            });

            modelBuilder.Entity<TransToShip>(entity =>
            {
                entity.Property(e => e.Bar).IsUnicode(false);

                entity.Property(e => e.CkStNo).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.KD).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<TransToStock>(entity =>
            {
                entity.Property(e => e.Bar).IsUnicode(false);

                entity.Property(e => e.CkStNo).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.KD).IsUnicode(false);

                entity.Property(e => e.Position).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.StoreID).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<Transfer>(entity =>
            {
                entity.HasKey(e => new { e.TransferID, e.Item })
                    .HasName("aaaaaTransfer_PK")
                    .IsClustered(false);

                entity.Property(e => e.TransferID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.AccountFlag).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CheckDate).IsUnicode(false);

                entity.Property(e => e.ClientGoodID).IsUnicode(false);

                entity.Property(e => e.DealFlag)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.IsCheck).IsUnicode(false);

                entity.Property(e => e.Mode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RecordFlag).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RemarkNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequireID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.SortMode).IsUnicode(false);

                entity.Property(e => e.TranDate).IsUnicode(false);

                entity.Property(e => e.TranInStore).IsUnicode(false);

                entity.Property(e => e.TranOutID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranOutItem)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TranOutStore).IsUnicode(false);

                entity.Property(e => e.xRemarkA).HasDefaultValueSql("((0))");

                entity.Property(e => e.xRemarkB).IsUnicode(false);

                entity.Property(e => e.xRemarkC).IsUnicode(false);
            });

            modelBuilder.Entity<TransferBarList>(entity =>
            {
                entity.Property(e => e.RowID).HasDefaultValueSql("('')");

                entity.Property(e => e.Bar)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TransferDelete>(entity =>
            {
                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.DealFlag).IsUnicode(false);

                entity.Property(e => e.FactStore).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.RecordFlag).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RemarkNew).IsUnicode(false);

                entity.Property(e => e.RequireID).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TranDate).IsUnicode(false);

                entity.Property(e => e.TranInStore).IsUnicode(false);

                entity.Property(e => e.TranOutID).IsUnicode(false);

                entity.Property(e => e.TranOutItem).IsUnicode(false);

                entity.Property(e => e.TranOutStore).IsUnicode(false);

                entity.Property(e => e.TransferID).IsUnicode(false);
            });

            modelBuilder.Entity<TransferP>(entity =>
            {
                entity.HasKey(e => new { e.TransferID, e.Item })
                    .HasName("aaaaaTransferP_PK")
                    .IsClustered(false);

                entity.Property(e => e.TransferID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Brand).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Factory).IsUnicode(false);

                entity.Property(e => e.FillPerson).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.RecordFlag).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TranDate).IsUnicode(false);

                entity.Property(e => e.TranInStore).IsUnicode(false);

                entity.Property(e => e.TranOutStore).IsUnicode(false);
            });

            modelBuilder.Entity<TsLineHelpField>(entity =>
            {
                entity.HasKey(e => new { e.LineHelpID, e.Item });

                entity.Property(e => e.LineHelpID).HasComment("代號");

                entity.Property(e => e.Item).HasComment("項次");

                entity.Property(e => e.FieldName).HasComment("欄位名稱");

                entity.Property(e => e.FieldType).HasComment("欄位類型");

                entity.Property(e => e.FormatType).HasComment("格式類型");

                entity.Property(e => e.Name).HasComment("名稱");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.SortID).HasComment("序號");

                entity.HasOne(d => d.LineHelp)
                    .WithMany(p => p.TsLineHelpField)
                    .HasForeignKey(d => d.LineHelpID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsLineHelpField_TsLineHelpMain");
            });

            modelBuilder.Entity<TsLineHelpMain>(entity =>
            {
                entity.HasComment("LineHelp主表");

                entity.Property(e => e.LineHelpID)
                    .ValueGeneratedNever()
                    .HasComment("代號");

                entity.Property(e => e.Caption).HasComment("標題");

                entity.Property(e => e.DBObjectName).HasDefaultValueSql("('')");

                entity.Property(e => e.FilterFieldFullName).HasDefaultValueSql("('')");

                entity.Property(e => e.LineHelpName).HasComment("名稱");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.ReturnField).HasDefaultValueSql("('')");

                entity.Property(e => e.SQL)
                    .HasDefaultValueSql("('')")
                    .HasComment("SQL語句");
            });

            modelBuilder.Entity<TsPara>(entity =>
            {
                entity.Property(e => e.ParaName).HasComment("參數名稱");

                entity.Property(e => e.ChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("异動日期");

                entity.Property(e => e.ChangePerson).HasComment("异動人員");

                entity.Property(e => e.ParaRemark)
                    .HasDefaultValueSql("('')")
                    .HasComment("說明");

                entity.Property(e => e.ParaValue).HasComment("參數值");
            });

            modelBuilder.Entity<TsReportCondition>(entity =>
            {
                entity.HasKey(e => new { e.ReportID, e.Item });

                entity.HasComment("報表條件項目");

                entity.Property(e => e.ReportID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("報表代號");

                entity.Property(e => e.Item).HasComment("項次");

                entity.Property(e => e.AllowMultiSelect).HasComment("允許錄入條件");

                entity.Property(e => e.CanMultiEntry).HasDefaultValueSql("((1))");

                entity.Property(e => e.ConditionType).HasComment("默認條件類型");

                entity.Property(e => e.DefaultValue1).HasComment("默認條件值1");

                entity.Property(e => e.DefaultValue2).HasComment("默認條件值2");

                entity.Property(e => e.EnableCondition)
                    .HasDefaultValueSql("((1))")
                    .HasComment("允許錄入條件");

                entity.Property(e => e.FieldType).HasComment("欄位類型");

                entity.Property(e => e.LockConditionType).HasComment("鎖定條件類型");

                entity.Property(e => e.Name).HasComment("名稱");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.SortID).HasComment("序號");

                entity.Property(e => e.Visible).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.LineHelp)
                    .WithMany(p => p.TsReportCondition)
                    .HasForeignKey(d => d.LineHelpID)
                    .HasConstraintName("FK_TsReportCondition_TsLineHelpMain");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.TsReportCondition)
                    .HasForeignKey(d => d.ReportID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsReportCondition_TsReportMain");
            });

            modelBuilder.Entity<TsReportConditionSection>(entity =>
            {
                entity.HasKey(e => new { e.ReportID, e.Item, e.WhereSection });

                entity.Property(e => e.ReportID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("報表代號");

                entity.Property(e => e.Item).HasComment("項次");

                entity.Property(e => e.WhereSection).HasComment("條件分組");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.SortID).HasComment("序號");

                entity.Property(e => e.WhereFieldName).HasComment("欄位名稱");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.TsReportConditionSection)
                    .HasForeignKey(d => d.ReportID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsReportConditionSection_TsReportMain");

                entity.HasOne(d => d.TsReportCondition)
                    .WithMany(p => p.TsReportConditionSection)
                    .HasForeignKey(d => new { d.ReportID, d.Item })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsReportConditionSection_TsReportCondition");
            });

            modelBuilder.Entity<TsReportMain>(entity =>
            {
                entity.HasComment("報表中心");

                entity.Property(e => e.ReportID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("報表代號");

                entity.Property(e => e.BeginGroup).HasComment("菜單分組");

                entity.Property(e => e.BigDataWise)
                    .HasDefaultValueSql("((1))")
                    .HasComment("大量數據優化");

                entity.Property(e => e.DBObjectName).HasDefaultValueSql("('')");

                entity.Property(e => e.IsPivotGrid)
                    .HasDefaultValueSql("((1))")
                    .HasComment("區軸網格分析");

                entity.Property(e => e.ParentID).HasComment("父編號");

                entity.Property(e => e.ReportName).HasComment("報表名稱");

                entity.Property(e => e.SortID).HasComment("序號");

                entity.Property(e => e.Summary)
                    .HasDefaultValueSql("('')")
                    .HasComment("說明");

                entity.Property(e => e.XType).HasComment("類型");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentID)
                    .HasConstraintName("FK_TsReportMain_TsReportMain");
            });

            modelBuilder.Entity<TsReportResult>(entity =>
            {
                entity.HasKey(e => new { e.ReportID, e.Item });

                entity.HasComment("報表結果項目");

                entity.Property(e => e.ReportID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("報表代號");

                entity.Property(e => e.Item).HasComment("項次");

                entity.Property(e => e.AllowShowArea).HasComment("可顯示區域");

                entity.Property(e => e.FieldName).HasComment("欄位名稱");

                entity.Property(e => e.FieldType).HasComment("欄位類型");

                entity.Property(e => e.FormatType).HasComment("格式類型");

                entity.Property(e => e.GridFormula)
                    .HasDefaultValueSql("('')")
                    .HasComment("計算欄位網格公式");

                entity.Property(e => e.GroupName)
                    .HasDefaultValueSql("('')")
                    .HasComment("");

                entity.Property(e => e.Name).HasComment("名稱");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.RightType).HasComment("權限類型");

                entity.Property(e => e.SQLFormula)
                    .HasDefaultValueSql("('')")
                    .HasComment("計算欄位SQL字串");

                entity.Property(e => e.ShowArea).HasComment("顯示區域");

                entity.Property(e => e.ShowTotal).HasDefaultValueSql("((1))");

                entity.Property(e => e.SortID).HasComment("序號");

                entity.Property(e => e.SummaryType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("合計類型");

                entity.Property(e => e.Visible).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.TsReportResult)
                    .HasForeignKey(d => d.ReportID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsReportResult_TsReportMain");
            });

            modelBuilder.Entity<TsReportScheme>(entity =>
            {
                entity.HasComment("統計報表設定");

                entity.Property(e => e.SchemeID)
                    .ValueGeneratedNever()
                    .HasComment("方案編號");

                entity.Property(e => e.ChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("異動日期");

                entity.Property(e => e.IsDefault).HasComment("是否默認");

                entity.Property(e => e.Remark).HasDefaultValueSql("('')");

                entity.Property(e => e.ReportID).HasComment("報表代號");

                entity.Property(e => e.ReportName).HasComment("報表名稱");

                entity.Property(e => e.ViewType).HasComment("視圖模式");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.TsReportScheme)
                    .HasForeignKey(d => d.ReportID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsReportScheme_TsReportMain");
            });

            modelBuilder.Entity<TsUserFunction>(entity =>
            {
                entity.HasComment("權限功能");

                entity.Property(e => e.FunctionID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("功能編號");

                entity.Property(e => e.ChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("异動日期");

                entity.Property(e => e.ChangeUserID).HasComment("异動人員");

                entity.Property(e => e.FunctionName).HasComment("功能名稱");

                entity.Property(e => e.ParentFunctionID).HasComment("父功能編號");

                entity.Property(e => e.SortID).HasComment("序號");
            });

            modelBuilder.Entity<TsUserRight>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.FunctionID });

                entity.HasComment("用戶權限");

                entity.Property(e => e.UserID).HasComment("用戶編號");

                entity.Property(e => e.FunctionID).HasComment("功能編號");

                entity.Property(e => e.ChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("异動日期");

                entity.Property(e => e.ChangeUserID).HasComment("异動人員");

                entity.Property(e => e.ParentFunctionID).HasComment("父功能編號");

                entity.Property(e => e.Rights).HasComment("權限");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TsUserRight)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TsUserRight_TsUsers");
            });

            modelBuilder.Entity<TsUsers>(entity =>
            {
                entity.HasComment("用戶/群組");

                entity.Property(e => e.UserID)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("用戶編號");

                entity.Property(e => e.ChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("异動日期");

                entity.Property(e => e.ChangeUserID).HasComment("异動人員");

                entity.Property(e => e.DelFlag).HasComment("删除識別");

                entity.Property(e => e.Description)
                    .HasDefaultValueSql("('')")
                    .HasComment("說明");

                entity.Property(e => e.EmpID).HasComment("員工編號");

                entity.Property(e => e.IsActive)
                    .HasDefaultValueSql("((1))")
                    .HasComment("活動識別");

                entity.Property(e => e.ParentUserID).HasComment("父用戶編號");

                entity.Property(e => e.Password)
                    .HasDefaultValueSql("(N'now()')")
                    .HasComment("密碼");

                entity.Property(e => e.UserCode).HasComment("用戶代號");

                entity.Property(e => e.UserName).HasComment("用戶名稱");

                entity.HasOne(d => d.ParentUser)
                    .WithMany(p => p.InverseParentUser)
                    .HasForeignKey(d => d.ParentUserID)
                    .HasConstraintName("FK_TsUsers_TsUsers");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasKey(e => e.Group_Name)
                    .HasName("aaaaaUserGroup_PK")
                    .IsClustered(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserID)
                    .IsClustered(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.UserNumber).IsUnicode(false);
            });

            modelBuilder.Entity<WayBill>(entity =>
            {
                entity.HasKey(e => new { e.WayBillID, e.Item })
                    .IsClustered(false);

                entity.Property(e => e.WayBillID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.Area).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.No).IsUnicode(false);

                entity.Property(e => e.OddNumID).IsUnicode(false);

                entity.Property(e => e.WayBillDate).IsUnicode(false);

                entity.Property(e => e.WayBillPerson).IsUnicode(false);
            });

            modelBuilder.Entity<WayRemark>(entity =>
            {
                entity.Property(e => e.API_91_OrderFlag).IsUnicode(false);

                entity.Property(e => e.API_91_ShipFlag).IsUnicode(false);

                entity.Property(e => e.DetFlag).IsUnicode(false);

                entity.Property(e => e.KTJSort).IsUnicode(false);

                entity.Property(e => e.Remark01).IsUnicode(false);

                entity.Property(e => e.Remark02).IsUnicode(false);

                entity.Property(e => e.Remark03).IsUnicode(false);

                entity.Property(e => e.Remark04).IsUnicode(false);

                entity.Property(e => e.Remark05).IsUnicode(false);

                entity.Property(e => e.Remark06).IsUnicode(false);

                entity.Property(e => e.Remark07).IsUnicode(false);

                entity.Property(e => e.Remark08).IsUnicode(false);

                entity.Property(e => e.Remark09).IsUnicode(false);

                entity.Property(e => e.Remark10).IsUnicode(false);

                entity.Property(e => e.Remark11).IsUnicode(false);

                entity.Property(e => e.Remark12).IsUnicode(false);

                entity.Property(e => e.Remark13).IsUnicode(false);

                entity.Property(e => e.Remark14).IsUnicode(false);

                entity.Property(e => e.Remark15).IsUnicode(false);

                entity.Property(e => e.Remark16).IsUnicode(false);

                entity.Property(e => e.Remark17).IsUnicode(false);

                entity.Property(e => e.Remark18).IsUnicode(false);

                entity.Property(e => e.Remark19).IsUnicode(false);

                entity.Property(e => e.Remark20).IsUnicode(false);

                entity.Property(e => e.Remark21).IsUnicode(false);

                entity.Property(e => e.Remark22).IsUnicode(false);

                entity.Property(e => e.Remark23).IsUnicode(false);

                entity.Property(e => e.Remark24).IsUnicode(false);

                entity.Property(e => e.Remark25).IsUnicode(false);

                entity.Property(e => e.Remark26).IsUnicode(false);

                entity.Property(e => e.TotFlag).IsUnicode(false);

                entity.Property(e => e.TotSortFlag).IsUnicode(false);
            });

            modelBuilder.Entity<WebAddChk>(entity =>
            {
                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FillPerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupOrderID).IsUnicode(false);

                entity.Property(e => e.OccDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldTradeID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.RGoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.RSellBranch).IsUnicode(false);

                entity.Property(e => e.RSellID).IsUnicode(false);

                entity.Property(e => e.RSellIDNew).IsUnicode(false);

                entity.Property(e => e.RSellItem).IsUnicode(false);

                entity.Property(e => e.RSellItemNew).IsUnicode(false);

                entity.Property(e => e.RSizeName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RSizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RSizePosition).HasDefaultValueSql("((0))");

                entity.Property(e => e.RStore)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceivePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark1).IsUnicode(false);

                entity.Property(e => e.Remark2).IsUnicode(false);

                entity.Property(e => e.SendAddress01)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizePosition).HasDefaultValueSql("((0))");

                entity.Property(e => e.TelPhone01)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelPhone02)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelPhone03)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Total).HasDefaultValueSql("((0))");

                entity.Property(e => e.TradeID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WebSort).IsUnicode(false);
            });

            modelBuilder.Entity<WebDelLog>(entity =>
            {
                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDateTime)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<WebToolsGroupProgram>(entity =>
            {
                entity.Property(e => e.Cost_Flag).IsUnicode(false);

                entity.Property(e => e.Delete_Flag).IsUnicode(false);

                entity.Property(e => e.Edit_Flag).IsUnicode(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Insert_Flag).IsUnicode(false);

                entity.Property(e => e.Money_Flag).IsUnicode(false);

                entity.Property(e => e.Print_Flag).IsUnicode(false);

                entity.Property(e => e.Program_Name).IsUnicode(false);

                entity.Property(e => e.View_Flag).IsUnicode(false);
            });

            modelBuilder.Entity<WebToolsUserGroup>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);
            });

            modelBuilder.Entity<WebToolsUsers>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.Property(e => e.UserNumber).IsUnicode(false);
            });

            modelBuilder.Entity<WebTools_Orders>(entity =>
            {
                entity.Property(e => e.Cancel).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.CollectionIDNew)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country).IsUnicode(false);

                entity.Property(e => e.Currency).IsUnicode(false);

                entity.Property(e => e.GoodName).IsUnicode(false);

                entity.Property(e => e.GroupID).IsUnicode(false);

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.InvoiceTitle).IsUnicode(false);

                entity.Property(e => e.InvoiceType).IsUnicode(false);

                entity.Property(e => e.IsNeedInvoice).IsUnicode(false);

                entity.Property(e => e.MemTel03).IsUnicode(false);

                entity.Property(e => e.Mode).IsUnicode(false);

                entity.Property(e => e.PaymentID).IsUnicode(false);

                entity.Property(e => e.PurID).IsUnicode(false);

                entity.Property(e => e.PurItem).IsUnicode(false);

                entity.Property(e => e.PurMode).IsUnicode(false);

                entity.Property(e => e.SaleType).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SelldingFlag).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.ShippingType).IsUnicode(false);

                entity.Property(e => e.SortGroup).IsUnicode(false);

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.UnifiedNum).IsUnicode(false);

                entity.Property(e => e.YaDID).IsUnicode(false);

                entity.Property(e => e.YaEDate).IsUnicode(false);

                entity.Property(e => e.YaSID).IsUnicode(false);

                entity.Property(e => e.ZipID01).IsUnicode(false);

                entity.Property(e => e.collectionid).IsUnicode(false);

                entity.Property(e => e.e7StoreID).IsUnicode(false);

                entity.Property(e => e.e7StoreName).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.goodid).IsUnicode(false);

                entity.Property(e => e.memberid).IsUnicode(false);

                entity.Property(e => e.orderid).IsUnicode(false);

                entity.Property(e => e.phoneno).IsUnicode(false);

                entity.Property(e => e.sizename).IsUnicode(false);

                entity.Property(e => e.sizeno).IsUnicode(false);

                entity.Property(e => e.telno).IsUnicode(false);
            });

            modelBuilder.Entity<Web_BatchPickStore>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.Store })
                    .HasName("Web_Web_BatchPickStore");

                entity.Property(e => e.Store).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.CollectionID).IsUnicode(false);

                entity.Property(e => e.OutStoreFlag).IsUnicode(false);

                entity.Property(e => e.SelldingFlag).IsUnicode(false);
            });

            modelBuilder.Entity<Web_Payment>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Web_Phrase>(entity =>
            {
                entity.HasKey(e => e.PhraseNo)
                    .IsClustered(false);

                entity.Property(e => e.PhraseNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeDate)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangePerson)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Phrase)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Web_Ship>(entity =>
            {
                entity.HasKey(e => new { e.OrderID, e.Item });

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.BPUPListID).IsUnicode(false);

                entity.Property(e => e.CGoodID).IsUnicode(false);

                entity.Property(e => e.CGoodName).IsUnicode(false);

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.CollectionID).IsUnicode(false);

                entity.Property(e => e.DetailRemark).IsUnicode(false);

                entity.Property(e => e.DingSellID).IsUnicode(false);

                entity.Property(e => e.FOID).IsUnicode(false);

                entity.Property(e => e.Fname).IsUnicode(false);

                entity.Property(e => e.Ftel).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.GroupID).IsUnicode(false);

                entity.Property(e => e.HCTID).IsUnicode(false);

                entity.Property(e => e.InvoiceType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MemTel03).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.PhoneNo).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SellItem).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SelldingFlag).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SiteUrl).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.TelNo).IsUnicode(false);

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.TransferID).IsUnicode(false);

                entity.Property(e => e.UnifiedNum).IsUnicode(false);

                entity.Property(e => e.WayGoid).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.WayKind).IsUnicode(false);

                entity.Property(e => e.WayOrderID).IsUnicode(false);

                entity.Property(e => e.WayStoreID).IsUnicode(false);

                entity.Property(e => e.WayStoreInDate).IsUnicode(false);

                entity.Property(e => e.WayStoreName).IsUnicode(false);

                entity.Property(e => e.WayStoreOutDate).IsUnicode(false);

                entity.Property(e => e.WebGoodID).IsUnicode(false);

                entity.Property(e => e.WebGoodName).IsUnicode(false);

                entity.Property(e => e.WebSellID).IsUnicode(false);

                entity.Property(e => e.YaDID).IsUnicode(false);

                entity.Property(e => e.YaEDate).IsUnicode(false);

                entity.Property(e => e.YaSID).IsUnicode(false);

                entity.Property(e => e.ZipID01).IsUnicode(false);
            });

            modelBuilder.Entity<Web_WayTrans>(entity =>
            {
                entity.HasKey(e => new { e.PlatformID, e.TransactionId, e.OrderID });

                entity.Property(e => e.TransactionId).IsUnicode(false);

                entity.Property(e => e.OrderID).IsUnicode(false);

                entity.Property(e => e.ChangeDate).IsUnicode(false);

                entity.Property(e => e.ChangePerson).IsUnicode(false);

                entity.Property(e => e.Fname).IsUnicode(false);

                entity.Property(e => e.Ftel).IsUnicode(false);

                entity.Property(e => e.SiteUrl).IsUnicode(false);

                entity.Property(e => e.WayGoID).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.WayStoreID).IsUnicode(false);

                entity.Property(e => e.WayStoreName).IsUnicode(false);
            });

            modelBuilder.Entity<YahooSell>(entity =>
            {
                entity.Property(e => e.MemAddr).IsUnicode(false);

                entity.Property(e => e.MemName).IsUnicode(false);

                entity.Property(e => e.MemTel01).IsUnicode(false);

                entity.Property(e => e.MemTel02).IsUnicode(false);

                entity.Property(e => e.MemTel03).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SellReturnsID).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.Transport).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.YaDID).IsUnicode(false);

                entity.Property(e => e.YaEDate).IsUnicode(false);

                entity.Property(e => e.YaID).IsUnicode(false);

                entity.Property(e => e.YaSID).IsUnicode(false);

                entity.Property(e => e.ZipID01).IsUnicode(false);
            });

            modelBuilder.Entity<YahooSellReturns>(entity =>
            {
                entity.Property(e => e.MemAddr).IsUnicode(false);

                entity.Property(e => e.MemName).IsUnicode(false);

                entity.Property(e => e.MemTel01).IsUnicode(false);

                entity.Property(e => e.MemTel02).IsUnicode(false);

                entity.Property(e => e.MemTel03).IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SellID).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SellReturnsID).IsUnicode(false);

                entity.Property(e => e.ShipMode).IsUnicode(false);

                entity.Property(e => e.SortID).IsUnicode(false);

                entity.Property(e => e.Transport).IsUnicode(false);

                entity.Property(e => e.WayID).IsUnicode(false);

                entity.Property(e => e.YaDID).IsUnicode(false);

                entity.Property(e => e.YaEDate).IsUnicode(false);

                entity.Property(e => e.YaID).IsUnicode(false);

                entity.Property(e => e.YaSID).IsUnicode(false);

                entity.Property(e => e.ZipID01).IsUnicode(false);
            });

            modelBuilder.Entity<myChangePriceDetail>(entity =>
            {
                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Num1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num10).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num11).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num12).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num13).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num14).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num15).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num16).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num17).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num9).HasDefaultValueSql("((0))");

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<myClientChangePriceDetail>(entity =>
            {
                entity.Property(e => e.GoodID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Item)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Num1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num10).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num11).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num12).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num13).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num14).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num15).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num16).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num17).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Num9).HasDefaultValueSql("((0))");

                entity.Property(e => e.SerialID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SizeNo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreID)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalNum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<petertest>(entity =>
            {
                entity.HasKey(e => e.test1)
                    .HasName("PK__petertes__C21D89824F67C174");

                entity.Property(e => e.test1).IsUnicode(false);
            });

            modelBuilder.Entity<pov107Temp>(entity =>
            {
                entity.Property(e => e.AutoID).IsUnicode(false);

                entity.Property(e => e.Bar).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Size).IsUnicode(false);

                entity.Property(e => e.UserID).IsUnicode(false);
            });

            modelBuilder.Entity<pov308temp>(entity =>
            {
                entity.Property(e => e.cuscode).IsUnicode(false);
            });

            modelBuilder.Entity<pov533temp>(entity =>
            {
                entity.Property(e => e.sort01name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort02name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort03name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort04name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort05name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.user_id).IsUnicode(false);
            });

            modelBuilder.Entity<pov534temp>(entity =>
            {
                entity.Property(e => e.User_id).IsUnicode(false);

                entity.Property(e => e.season)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort01)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort02)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort03)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort04)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort05)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.year)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<pov536temp>(entity =>
            {
                entity.Property(e => e.sort01name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort02name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort03name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort04name)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sort05name)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<shopping_cart>(entity =>
            {
                entity.HasKey(e => new { e.SellBranch, e.terminalID, e.Item })
                    .HasName("aaaaaPOVWeb_shopping_cart_PK")
                    .IsClustered(false);

                entity.Property(e => e.SellBranch).IsUnicode(false);

                entity.Property(e => e.terminalID).IsUnicode(false);

                entity.Property(e => e.Item).IsUnicode(false);

                entity.Property(e => e.BackEInvID).IsUnicode(false);

                entity.Property(e => e.BackSellID).IsUnicode(false);

                entity.Property(e => e.BackSellItem).IsUnicode(false);

                entity.Property(e => e.GoodID).IsUnicode(false);

                entity.Property(e => e.MemberID).IsUnicode(false);

                entity.Property(e => e.PurchaseID).IsUnicode(false);

                entity.Property(e => e.PurchaseItem).IsUnicode(false);

                entity.Property(e => e.SellMode).IsUnicode(false);

                entity.Property(e => e.SellPerson).IsUnicode(false);

                entity.Property(e => e.SellStore).IsUnicode(false);

                entity.Property(e => e.SizeName).IsUnicode(false);

                entity.Property(e => e.SizeNo).IsUnicode(false);

                entity.Property(e => e.ZHBatchID).IsUnicode(false);

                entity.Property(e => e.ZHBatchItem).IsUnicode(false);

                entity.Property(e => e.ZuHeID).IsUnicode(false);
            });

            modelBuilder.Entity<stClockOnOff>(entity =>
            {
                entity.HasKey(e => new { e.ClientID, e.WeekN });

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.StOff).IsUnicode(false);

                entity.Property(e => e.StOn).IsUnicode(false);
            });

            modelBuilder.Entity<tmpHello>(entity =>
            {
                entity.Property(e => e.createDTM).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.memo).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}